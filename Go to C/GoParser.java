/* Generated By:JavaCC: Do not edit this line. GoParser.java */
import syntaxtree.*;
import java.util.Vector;


public class GoParser implements GoParserConstants {

  static final public Goal Goal() throws ParseException {
   Packages n0;
   Imports n1;
   NodeListOptional n2 = new NodeListOptional();
   FunctionDeclaration n3;
   NodeToken n4;
   Token n5;
    n0 = Packages();
    n1 = Imports();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNC:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n3 = FunctionDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(0);
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Goal(n0,n1,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Packages Packages() throws ParseException {
   NodeChoice n0;
   PackageOther n1;
   PackageMain n2;
    if (jj_2_1(2)) {
      n1 = PackageOther();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        n2 = PackageMain();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Packages(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PackageOther PackageOther() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(PACKAGE);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new PackageOther(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PackageMain PackageMain() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(PACKAGE);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(MAIN);
               n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new PackageMain(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Imports Imports() throws ParseException {
   NodeChoice n0;
   SingleImport n1;
   MultipleImport n2;
    if (jj_2_2(2)) {
      n1 = SingleImport();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        n2 = MultipleImport();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Imports(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SingleImport SingleImport() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(IMPORT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(53);
             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(53);
             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new SingleImport(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public MultipleImport MultipleImport() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(IMPORT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
        n5 = new NodeSequence(3);
      n7 = jj_consume_token(53);
                n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = Identifier();
        n5.addNode(n8);
      n10 = jj_consume_token(53);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n5.addNode(n9);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    n12 = jj_consume_token(RPAREN);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new MultipleImport(n0,n2,n4,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDeclaration FunctionDeclaration() throws ParseException {
   NodeChoice n0;
   MainFunctionDeclaration n1;
   OtherFunctionDeclaration n2;
    if (jj_2_3(2)) {
      n1 = MainFunctionDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNC:
        n2 = OtherFunctionDeclaration();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new FunctionDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MainFunctionDeclaration MainFunctionDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   VarDeclaration n11;
   NodeListOptional n12 = new NodeListOptional();
   Statement n13;
   NodeToken n14;
   Token n15;
    n1 = jj_consume_token(FUNC);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(MAIN);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(LBRACE);
            n8 = JTBToolkit.makeNodeToken(n9);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      n11 = VarDeclaration();
        n10.addNode(n11);
    }
     n10.nodes.trimToSize();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case IF:
      case WHILE:
      case FOR:
      case PRINT1:
      case PRINT2:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case 53:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      n13 = Statement();
        n12.addNode(n13);
    }
     n12.nodes.trimToSize();
    n15 = jj_consume_token(RBRACE);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new MainFunctionDeclaration(n0,n2,n4,n6,n8,n10,n12,n14);}
    throw new Error("Missing return statement in function");
  }

  static final public OtherFunctionDeclaration OtherFunctionDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   Signature n3;
   NodeOptional n4 = new NodeOptional();
   Type n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDeclaration n9;
   NodeListOptional n10 = new NodeListOptional();
   Statement n11;
   NodeOptional n12 = new NodeOptional();
   ReturnExpression n13;
   NodeToken n14;
   Token n15;
    n1 = jj_consume_token(FUNC);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n3 = Signature();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      n5 = Type();
        n4.addNode(n5);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n7 = jj_consume_token(LBRACE);
            n6 = JTBToolkit.makeNodeToken(n7);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      n9 = VarDeclaration();
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case IF:
      case WHILE:
      case FOR:
      case PRINT1:
      case PRINT2:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case 53:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      n11 = Statement();
        n10.addNode(n11);
    }
     n10.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      n13 = ReturnExpression();
        n12.addNode(n13);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    n15 = jj_consume_token(RBRACE);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new OtherFunctionDeclaration(n0,n2,n3,n4,n6,n8,n10,n12,n14);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnExpression ReturnExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new ReturnExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Signature Signature() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   VarType n4;
   NodeListOptional n5;
   CommaVarType n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = VarType();
        n3.addNode(n4);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        n6 = CommaVarType();
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Signature(n0,n2,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public VarType VarType() throws ParseException {
   Identifier n0;
   Type n1;
    n0 = Identifier();
    n1 = Type();
     {if (true) return new VarType(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public CommaVarType CommaVarType() throws ParseException {
   NodeToken n0;
   Token n1;
   VarType n2;
    n1 = jj_consume_token(54);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = VarType();
     {if (true) return new CommaVarType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   PrintStatement n1;
   Block n2;
   IfStatement n3;
   WhileStatement n4;
   ForStatement n5;
   AssignmentStatement n6;
   Expression n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT1:
    case PRINT2:
      n1 = PrintStatement();
        n0 = new NodeChoice(n1, 0);
      break;
    case LBRACE:
      n2 = Block();
        n0 = new NodeChoice(n2, 1);
      break;
    case IF:
      n3 = IfStatement();
        n0 = new NodeChoice(n3, 2);
      break;
    case WHILE:
      n4 = WhileStatement();
        n0 = new NodeChoice(n4, 3);
      break;
    case FOR:
      n5 = ForStatement();
        n0 = new NodeChoice(n5, 4);
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_4(3)) {
        n6 = AssignmentStatement();
        n0 = new NodeChoice(n6, 5);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case INTEGER_LITERAL:
        case IDENTIFIER:
        case 53:
          n7 = Expression();
        n0 = new NodeChoice(n7, 6);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   VarDeclaration n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      n3 = VarDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case IF:
      case WHILE:
      case FOR:
      case PRINT1:
      case PRINT2:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case 53:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      n5 = Statement();
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    n7 = jj_consume_token(RBRACE);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new Block(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclaration VarDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   CommaIdentifier n4;
   Type n5;
    n1 = jj_consume_token(VAR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      n4 = CommaIdentifier();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n5 = Type();
     {if (true) return new VarDeclaration(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public CommaIdentifier CommaIdentifier() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(54);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new CommaIdentifier(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatement AssignmentStatement() throws ParseException {
   PrimaryExpression n0;
   AssignmentOperator n1;
   Expression n2;
    n0 = PrimaryExpression();
    n1 = AssignmentOperator();
    n2 = Expression();
     {if (true) return new AssignmentStatement(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentOperator AssignmentOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n2 = jj_consume_token(ASSIGN);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 55:
      n4 = jj_consume_token(55);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case 56:
      n6 = jj_consume_token(56);
                n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case 57:
      n8 = jj_consume_token(57);
                n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case 58:
      n10 = jj_consume_token(58);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case 59:
      n12 = jj_consume_token(59);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case 60:
      n14 = jj_consume_token(60);
                  n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case 61:
      n16 = jj_consume_token(61);
                  n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case 62:
      n18 = jj_consume_token(62);
                 n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case 63:
      n20 = jj_consume_token(63);
                 n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case 64:
      n22 = jj_consume_token(64);
                 n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   Statement n3;
   NodeOptional n4 = new NodeOptional();
   ElseStatement n5;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n3 = Statement();
    if (jj_2_5(2)) {
      n5 = ElseStatement();
        n4.addNode(n5);
    } else {
      ;
    }
     {if (true) return new IfStatement(n0,n2,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ElseStatement ElseStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
    n1 = jj_consume_token(ELSE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
     {if (true) return new ElseStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   Statement n3;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n3 = Statement();
     {if (true) return new WhileStatement(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ForStatement ForStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   AssignmentStatement n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   Statement n11;
   Statement n12;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case 53:
      n3 = AssignmentStatement();
        n2.addNode(n3);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case 53:
      n7 = Expression();
        n6.addNode(n7);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    n9 = jj_consume_token(SEMICOLON);
            n8 = JTBToolkit.makeNodeToken(n9);
    if (jj_2_6(2)) {
      n11 = Statement();
        n10.addNode(n11);
    } else {
      ;
    }
    n12 = Statement();
     {if (true) return new ForStatement(n0,n2,n4,n6,n8,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatement PrintStatement() throws ParseException {
   NodeChoice n0;
   PrintlnStatement n1;
   PrintfStatement n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT1:
      n1 = PrintlnStatement();
        n0 = new NodeChoice(n1, 0);
      break;
    case PRINT2:
      n2 = PrintfStatement();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrintStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintlnStatement PrintlnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   StringPrint n2;
    n1 = jj_consume_token(PRINT1);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StringPrint();
     {if (true) return new PrintlnStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintfStatement PrintfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   StringPrint n2;
    n1 = jj_consume_token(PRINT2);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StringPrint();
     {if (true) return new PrintfStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public StringPrint StringPrint() throws ParseException {
   NodeToken n0;
   Token n1;
   StringMsg n2;
   NodeListOptional n3 = new NodeListOptional();
   CommaExpression n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StringMsg();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      n4 = CommaExpression();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new StringPrint(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   PrimaryExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   Operator n3;
   Expression n4;
    n0 = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case GT:
    case PLUS:
    case MINUS:
    case STAR:
    case DIVIDE:
    case MODULO:
    case AND:
    case OR:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
        n2 = new NodeSequence(2);
      n3 = Operator();
        n2.addNode(n3);
      n4 = Expression();
        n2.addNode(n4);
        n1.addNode(n2);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
     {if (true) return new Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Operator Operator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n2 = jj_consume_token(PLUS);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case MINUS:
      n4 = jj_consume_token(MINUS);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case STAR:
      n6 = jj_consume_token(STAR);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case DIVIDE:
      n8 = jj_consume_token(DIVIDE);
               n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case MODULO:
      n10 = jj_consume_token(MODULO);
                n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case LT:
      n12 = jj_consume_token(LT);
                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case GT:
      n14 = jj_consume_token(GT);
                n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case 65:
      n16 = jj_consume_token(65);
                 n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case 66:
      n18 = jj_consume_token(66);
                 n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case 67:
      n20 = jj_consume_token(67);
                 n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case 68:
      n22 = jj_consume_token(68);
                 n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case 69:
      n24 = jj_consume_token(69);
                 n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case 70:
      n26 = jj_consume_token(70);
                 n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case AND:
      n28 = jj_consume_token(AND);
                n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case 71:
      n30 = jj_consume_token(71);
                 n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case OR:
      n32 = jj_consume_token(OR);
                n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case 72:
      n34 = jj_consume_token(72);
                 n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case 73:
      n36 = jj_consume_token(73);
                n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    case 63:
      n38 = jj_consume_token(63);
                 n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
      break;
    case 62:
      n40 = jj_consume_token(62);
                 n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
      break;
    case 64:
      n42 = jj_consume_token(64);
                 n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Operator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   IntegerLiteral n1;
   NodeSequence n2;
   Identifier n3;
   PostfixExpression n4;
   NodeSequence n5;
   BracketExpression n6;
   NodeToken n7;
   Token n8;
   StringMsg n9;
   Identifier n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n1 = IntegerLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[25] = jj_gen;
      if (jj_2_7(2)) {
        n2 = new NodeSequence(3);
        n3 = Identifier();
        n2.addNode(n3);
        n4 = PostfixExpression();
        n2.addNode(n4);
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        n5 = new NodeSequence(2);
          n6 = BracketExpression();
        n5.addNode(n6);
          n8 = jj_consume_token(RPAREN);
               n7 = JTBToolkit.makeNodeToken(n8);
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 2);
          break;
        case 53:
          n9 = StringMsg();
        n0 = new NodeChoice(n9, 3);
          break;
        case IDENTIFIER:
          n10 = Identifier();
        n0 = new NodeChoice(n10, 4);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression PostfixExpression() throws ParseException {
   NodeChoice n0;
   ArrayAccessExpression n1;
   FunctionArgumentExpression n2;
   Increment n3;
   Decrement n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQPAREN:
      n1 = ArrayAccessExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
      n2 = FunctionArgumentExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    case 74:
      n3 = Increment();
        n0 = new NodeChoice(n3, 2);
      break;
    case 75:
      n4 = Decrement();
        n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PostfixExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Increment Increment() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(74);
             n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Increment(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Decrement Decrement() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(75);
             n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Decrement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAccessExpression ArrayAccessExpression() throws ParseException {
   NodeList n0 = new NodeList();
   SingleArrayAccessExpression n1;
    label_12:
    while (true) {
      n1 = SingleArrayAccessExpression();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQPAREN:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new ArrayAccessExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SingleArrayAccessExpression SingleArrayAccessExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LSQPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(RSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new SingleArrayAccessExpression(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionArgumentExpression FunctionArgumentExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentExpressionList n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_8(2147483647)) {
      n3 = ArgumentExpressionList();
        n2.addNode(n3);
    } else {
      ;
    }
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new FunctionArgumentExpression(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentExpressionList ArgumentExpressionList() throws ParseException {
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   CommaExpression n2;
    n0 = Expression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_13;
      }
      n2 = CommaExpression();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgumentExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public CommaExpression CommaExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
    n1 = jj_consume_token(54);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new CommaExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public BracketExpression BracketExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new BracketExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public StringMsg StringMsg() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   SubStrinMsg n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(53);
             n0 = JTBToolkit.makeNodeToken(n1);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LT:
      case GT:
      case PLUS:
      case MINUS:
      case STAR:
      case DIVIDE:
      case MODULO:
      case AND:
      case OR:
      case IDENTIFIER:
      case 54:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 76:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_14;
      }
      n3 = SubStrinMsg();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(53);
             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new StringMsg(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public SubStrinMsg SubStrinMsg() throws ParseException {
   NodeChoice n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Operator n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = Identifier();
        n0 = new NodeChoice(n1, 0);
      break;
    case DOT:
      n3 = jj_consume_token(DOT);
               n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
      break;
    case LT:
    case GT:
    case PLUS:
    case MINUS:
    case STAR:
    case DIVIDE:
    case MODULO:
    case AND:
    case OR:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
      n4 = Operator();
        n0 = new NodeChoice(n4, 2);
      break;
    case 54:
      n6 = jj_consume_token(54);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 3);
      break;
    case 76:
      n8 = jj_consume_token(76);
                n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 4);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SubStrinMsg(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(70)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    Token xsp;
    if (jj_3R_72()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(MAIN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_73()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(53)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(PRINT2)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(PRINT1)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GoParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2200,0x0,0x0,0x2200,0x0,0x0,0x0,0x2000,0x200,0x0,0x2200,0x0,0x40000,0x200,0x200,0x0,0x0,0xff80000,0xff80000,0x0,0x200,0xa00,0x800,0x0,0xffa0000,0xffa0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000,0x1000,0x2000,0x200000,0x4000,0x8000,0x260607,0x8,0x8000,0x260607,0x40,0x400000,0x40000,0x607,0x260000,0x8000,0x260607,0x400000,0xff800000,0x260000,0x260000,0x600,0x400000,0xc0000000,0xc0000000,0x20000,0x240000,0x0,0x0,0x400000,0xc0440000,0xc0440000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x3ff,0x3ff,0x0,0x0,0xc00,0x0,0x0,0x13ff,0x13ff,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GoParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GoParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GoParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GoParser(GoParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[77];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 77; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
