PARSER_BEGIN(GoParser)
  public class GoParser {}
PARSER_END(GoParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
} 

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: ":=" >
| < LT: "<" >
| < LTE: "<=" >
| < GT: ">" >
| < GTE: ">=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < DIVIDE: "/" >
| < MODULO: "%" >
| < AND : "&" >
| < OR : "|" >   
| < NOT : "!" > 
| < BOOLEAN: "boolean" > 
| < ELSE: "else" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >   
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < TRUE: "true" >
| < PRINT: "fmt.Println" >
| < VOID: "void" >
| < PACKAGE: "package" >
| < IMPORT: "import" >
| < FUNC : "func" >
| < VAR : "var" >
| < FOR : "for" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/*******************************************
 *******************************************
           _____          ______
          /____ \        / ____ \
         //    \_|      / /    \ \
        //             / /      \ \
       //             | |        | |
       ||     ___     | |        | |
       ||    |_ _|    | |        | |
       \\     | |      \ \      / /
        \\___ / |       \ \____/ /
         \____/\|        \______/

********************************************
********************************************/


void Goal() :
{}
{
  Packages()
  Imports()
  ( FunctionDeclaration() )*
  <EOF>
}

void Packages() :
{}
{
  "package" Identifier()
}

void Imports() :
{}
{
  LOOKAHEAD(2)
  "import" "\"" Identifier() "\""
|
  "import" "(" ( "\"" Identifier() "\"" )* ")"
}

void FunctionDeclaration() :
{}
{
  "func" Identifier() Signature() [ Type() ] "{" ( VarDeclaration() )* ( Statement() )* [ "return" Expression() ] "}"
}

void Signature() :
{}
{
  "(" [ Identifier() [ Type() ] ("," Identifier() [ Type() ] )* ] ")"
}

void Type() :
{}
{
  "int"
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void Statement() :
{}
{
  Block()
| 
  AssignmentStatement()
|
  IfStatement()
|
  WhileStatement()
|
  ForStatement()
|
  PrintStatement()
}

void Block() :
{}
{
  "{" ( VarDeclaration() )* ( Statement() )* "}"
}

void VarDeclaration() :
{}
{
  "var" Identifier() ( "," Identifier() )* Type()
}

void AssignmentStatement() :
{}
{
  Identifier() "=" Expression()
}

void IfStatement() :
{}
{
  "if" Expression() Statement() [ LOOKAHEAD(2) "else" Statement() ]
}

void WhileStatement() :
{}
{
  "while" Expression() "{" Statement() "}"
}

void ForStatement() :
{}
{
  "for" [ AssignmentStatement() ] ";" [ Expression() ] ";" [ LOOKAHEAD(3) AssignmentStatement() | IncrementStatement() ] "{" Statement() "}"
}

void IncrementStatement() :
{}
{
  "++" Identifier()
|
  "--" Identifier()
|
  LOOKAHEAD(2)
  Identifier() "++"
| 
  Identifier() "--"
}

void PrintStatement() :
{}
{
  "fmt.Println" "(" Expression() ")"
  |
  "fmt.Printf" "(" Expression() ")"
}

void Expression() :
{}
{
  LOOKAHEAD( PrimaryExpression() "&" )
  AndExpression()
|
  LOOKAHEAD( PrimaryExpression() "<" )
  CompareExpression()
|
  LOOKAHEAD( PrimaryExpression() "==" )
  EqualityExpression()
|
  LOOKAHEAD( PrimaryExpression() "+" )
  PlusExpression()
|
  LOOKAHEAD( PrimaryExpression() "-" )
  MinusExpression()
|
  LOOKAHEAD( PrimaryExpression() "*" )
  TimesExpression()
| 
  PrimaryExpression()
}

void AndExpression() :
{} 
{
  PrimaryExpression() "&" PrimaryExpression()
}

void CompareExpression() :
{} 
{
  PrimaryExpression() "<" PrimaryExpression()
}

void EqualityExpression() :
{} 
{
  PrimaryExpression() "==" PrimaryExpression()
}

void PlusExpression() :
{}
{
  PrimaryExpression() "+" PrimaryExpression()
}

void MinusExpression() :
{}
{
  PrimaryExpression() "-" PrimaryExpression()
}

void TimesExpression() :
{}
{
  PrimaryExpression() "*" PrimaryExpression()
}

void PrimaryExpression() :
{}
{
  IntegerLiteral()
|
  Identifier()
|
  BracketExpression()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void BracketExpression() :
{}
{
  "(" Expression() ")"
}

//need to fix compound expressions and function calls and printstatement


