//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Packages()
    * f1 -> Imports()
    * f2 -> ( FunctionDeclaration() )*
    * f3 -> <EOF>
    */
   public R visit(Goal n);

   /**
    * f0 -> PackageOther()
    *       | PackageMain()
    */
   public R visit(Packages n);

   /**
    * f0 -> "package"
    * f1 -> Identifier()
    */
   public R visit(PackageOther n);

   /**
    * f0 -> "package"
    * f1 -> "main"
    */
   public R visit(PackageMain n);

   /**
    * f0 -> SingleImport()
    *       | MultipleImport()
    */
   public R visit(Imports n);

   /**
    * f0 -> "import"
    * f1 -> "\""
    * f2 -> Identifier()
    * f3 -> "\""
    */
   public R visit(SingleImport n);

   /**
    * f0 -> "import"
    * f1 -> "("
    * f2 -> ( "\"" Identifier() "\"" )*
    * f3 -> ")"
    */
   public R visit(MultipleImport n);

   /**
    * f0 -> MainFunctionDeclaration()
    *       | OtherFunctionDeclaration()
    */
   public R visit(FunctionDeclaration n);

   /**
    * f0 -> "func"
    * f1 -> "main"
    * f2 -> "("
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( Statement() )*
    * f7 -> "}"
    */
   public R visit(MainFunctionDeclaration n);

   /**
    * f0 -> "func"
    * f1 -> Identifier()
    * f2 -> Signature()
    * f3 -> [ Type() ]
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( Statement() )*
    * f7 -> [ ReturnExpression() ]
    * f8 -> "}"
    */
   public R visit(OtherFunctionDeclaration n);

   /**
    * f0 -> "return"
    * f1 -> Expression()
    */
   public R visit(ReturnExpression n);

   /**
    * f0 -> "("
    * f1 -> [ VarType() ( CommaVarType() )* ]
    * f2 -> ")"
    */
   public R visit(Signature n);

   /**
    * f0 -> Identifier()
    * f1 -> Type()
    */
   public R visit(VarType n);

   /**
    * f0 -> ","
    * f1 -> VarType()
    */
   public R visit(CommaVarType n);

   /**
    * f0 -> "int"
    */
   public R visit(Type n);

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n);

   /**
    * f0 -> PrintStatement()
    *       | Block()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | AssignmentStatement()
    *       | Expression()
    */
   public R visit(Statement n);

   /**
    * f0 -> "{"
    * f1 -> ( VarDeclaration() )*
    * f2 -> ( Statement() )*
    * f3 -> "}"
    */
   public R visit(Block n);

   /**
    * f0 -> "var"
    * f1 -> Identifier()
    * f2 -> ( CommaIdentifier() )*
    * f3 -> Type()
    */
   public R visit(VarDeclaration n);

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(CommaIdentifier n);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> AssignmentOperator()
    * f2 -> Expression()
    */
   public R visit(AssignmentStatement n);

   /**
    * f0 -> "="
    *       | "*="
    *       | "/="
    *       | "%="
    *       | "+="
    *       | "-="
    *       | "<<="
    *       | ">>="
    *       | "&="
    *       | "^="
    *       | "|="
    */
   public R visit(AssignmentOperator n);

   /**
    * f0 -> "if"
    * f1 -> Expression()
    * f2 -> Statement()
    * f3 -> [ ElseStatement() ]
    */
   public R visit(IfStatement n);

   /**
    * f0 -> "else"
    * f1 -> Statement()
    */
   public R visit(ElseStatement n);

   /**
    * f0 -> "while"
    * f1 -> Expression()
    * f2 -> Statement()
    */
   public R visit(WhileStatement n);

   /**
    * f0 -> "for"
    * f1 -> [ AssignmentStatement() ]
    * f2 -> ";"
    * f3 -> [ Expression() ]
    * f4 -> ";"
    * f5 -> [ Statement() ]
    * f6 -> Statement()
    */
   public R visit(ForStatement n);

   /**
    * f0 -> PrintlnStatement()
    *       | PrintfStatement()
    */
   public R visit(PrintStatement n);

   /**
    * f0 -> "fmt.Println"
    * f1 -> StringPrint()
    */
   public R visit(PrintlnStatement n);

   /**
    * f0 -> "fmt.Printf"
    * f1 -> StringPrint()
    */
   public R visit(PrintfStatement n);

   /**
    * f0 -> "("
    * f1 -> StringMsg()
    * f2 -> ( CommaExpression() )*
    * f3 -> ")"
    */
   public R visit(StringPrint n);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> [ Operator() Expression() ]
    */
   public R visit(Expression n);

   /**
    * f0 -> "+"
    *       | "-"
    *       | "*"
    *       | "/"
    *       | "%"
    *       | "<"
    *       | ">"
    *       | "=="
    *       | ">="
    *       | "<="
    *       | "!="
    *       | ">>"
    *       | "<<"
    *       | "&"
    *       | "&&"
    *       | "|"
    *       | "||"
    *       | "^"
    *       | "^="
    *       | "&="
    *       | "|="
    */
   public R visit(Operator n);

   /**
    * f0 -> IntegerLiteral()
    *       | Identifier() PostfixExpression()
    *       | BracketExpression() ")"
    *       | StringMsg()
    *       | Identifier()
    */
   public R visit(PrimaryExpression n);

   /**
    * f0 -> ArrayAccessExpression()
    *       | FunctionArgumentExpression()
    *       | Increment()
    *       | Decrement()
    */
   public R visit(PostfixExpression n);

   /**
    * f0 -> "++"
    */
   public R visit(Increment n);

   /**
    * f0 -> "--"
    */
   public R visit(Decrement n);

   /**
    * f0 -> ( SingleArrayAccessExpression() )+
    */
   public R visit(ArrayAccessExpression n);

   /**
    * f0 -> "["
    * f1 -> Expression()
    * f2 -> "]"
    */
   public R visit(SingleArrayAccessExpression n);

   /**
    * f0 -> "("
    * f1 -> [ ArgumentExpressionList() ]
    * f2 -> ")"
    */
   public R visit(FunctionArgumentExpression n);

   /**
    * f0 -> Expression()
    * f1 -> ( CommaExpression() )*
    */
   public R visit(ArgumentExpressionList n);

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(CommaExpression n);

   /**
    * f0 -> "("
    * f1 -> Expression()
    */
   public R visit(BracketExpression n);

   /**
    * f0 -> "\""
    * f1 -> ( SubStrinMsg() )*
    * f2 -> "\""
    */
   public R visit(StringMsg n);

   /**
    * f0 -> Identifier()
    *       | "."
    *       | Operator()
    *       | ","
    *       | "\\"
    */
   public R visit(SubStrinMsg n);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n);

}

