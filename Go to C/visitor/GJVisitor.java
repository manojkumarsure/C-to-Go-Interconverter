//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Packages()
    * f1 -> Imports()
    * f2 -> ( FunctionDeclaration() )*
    * f3 -> <EOF>
    */
   public R visit(Goal n, A argu);

   /**
    * f0 -> "package"
    * f1 -> Identifier()
    */
   public R visit(Packages n, A argu);

   /**
    * f0 -> "import" "\"" Identifier() "\""
    *       | "import" "(" ( "\"" Identifier() "\"" )* ")"
    */
   public R visit(Imports n, A argu);

   /**
    * f0 -> "func"
    * f1 -> Identifier()
    * f2 -> Signature()
    * f3 -> [ Type() ]
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( Statement() )*
    * f7 -> [ "return" Expression() ]
    * f8 -> "}"
    */
   public R visit(FunctionDeclaration n, A argu);

   /**
    * f0 -> "("
    * f1 -> [ Identifier() [ Type() ] ( "," Identifier() [ Type() ] )* ]
    * f2 -> ")"
    */
   public R visit(Signature n, A argu);

   /**
    * f0 -> "int"
    */
   public R visit(Type n, A argu);

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu);

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu);

   /**
    * f0 -> "{"
    * f1 -> ( VarDeclaration() )*
    * f2 -> ( Statement() )*
    * f3 -> "}"
    */
   public R visit(Block n, A argu);

   /**
    * f0 -> "var"
    * f1 -> Identifier()
    * f2 -> ( "," Identifier() )*
    * f3 -> Type()
    */
   public R visit(VarDeclaration n, A argu);

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    */
   public R visit(AssignmentStatement n, A argu);

   /**
    * f0 -> "if"
    * f1 -> Expression()
    * f2 -> Statement()
    * f3 -> [ "else" Statement() ]
    */
   public R visit(IfStatement n, A argu);

   /**
    * f0 -> "while"
    * f1 -> Expression()
    * f2 -> "{"
    * f3 -> Statement()
    * f4 -> "}"
    */
   public R visit(WhileStatement n, A argu);

   /**
    * f0 -> "for"
    * f1 -> [ AssignmentStatement() ]
    * f2 -> ";"
    * f3 -> [ Expression() ]
    * f4 -> ";"
    * f5 -> [ AssignmentStatement() | IncrementStatement() ]
    * f6 -> "{"
    * f7 -> Statement()
    * f8 -> "}"
    */
   public R visit(ForStatement n, A argu);

   /**
    * f0 -> "++" Identifier()
    *       | "--" Identifier()
    *       | Identifier() "++"
    *       | Identifier() "--"
    */
   public R visit(IncrementStatement n, A argu);

   /**
    * f0 -> "fmt.Println" "(" Expression() ")"
    *       | "fmt.Printf" "(" Expression() ")"
    */
   public R visit(PrintStatement n, A argu);

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | EqualityExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "=="
    * f2 -> PrimaryExpression()
    */
   public R visit(EqualityExpression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu);

   /**
    * f0 -> IntegerLiteral()
    *       | Identifier()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu);

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu);

}
