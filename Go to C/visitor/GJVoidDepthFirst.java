//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Packages()
    * f1 -> Imports()
    * f2 -> ( FunctionDeclaration() )*
    * f3 -> <EOF>
    */
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> PackageOther()
    *       | PackageMain()
    */
   public void visit(Packages n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "package"
    * f1 -> Identifier()
    */
   public void visit(PackageOther n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "package"
    * f1 -> "main"
    */
   public void visit(PackageMain n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> SingleImport()
    *       | MultipleImport()
    */
   public void visit(Imports n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "import"
    * f1 -> "\""
    * f2 -> Identifier()
    * f3 -> "\""
    */
   public void visit(SingleImport n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> "import"
    * f1 -> "("
    * f2 -> ( "\"" Identifier() "\"" )*
    * f3 -> ")"
    */
   public void visit(MultipleImport n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> MainFunctionDeclaration()
    *       | OtherFunctionDeclaration()
    */
   public void visit(FunctionDeclaration n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "func"
    * f1 -> "main"
    * f2 -> "("
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( Statement() )*
    * f7 -> "}"
    */
   public void visit(MainFunctionDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
   }

   /**
    * f0 -> "func"
    * f1 -> Identifier()
    * f2 -> Signature()
    * f3 -> [ Type() ]
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( Statement() )*
    * f7 -> [ ReturnExpression() ]
    * f8 -> "}"
    */
   public void visit(OtherFunctionDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
   }

   /**
    * f0 -> "return"
    * f1 -> Expression()
    */
   public void visit(ReturnExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> [ VarType() ( CommaVarType() )* ]
    * f2 -> ")"
    */
   public void visit(Signature n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> Type()
    */
   public void visit(VarType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ","
    * f1 -> VarType()
    */
   public void visit(CommaVarType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "int"
    */
   public void visit(Type n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> PrintStatement()
    *       | Block()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | AssignmentStatement()
    *       | Expression()
    */
   public void visit(Statement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{"
    * f1 -> ( VarDeclaration() )*
    * f2 -> ( Statement() )*
    * f3 -> "}"
    */
   public void visit(Block n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> "var"
    * f1 -> Identifier()
    * f2 -> ( CommaIdentifier() )*
    * f3 -> Type()
    */
   public void visit(VarDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public void visit(CommaIdentifier n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> AssignmentOperator()
    * f2 -> Expression()
    */
   public void visit(AssignmentStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "="
    *       | "*="
    *       | "/="
    *       | "%="
    *       | "+="
    *       | "-="
    *       | "<<="
    *       | ">>="
    *       | "&="
    *       | "^="
    *       | "|="
    */
   public void visit(AssignmentOperator n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "if"
    * f1 -> Expression()
    * f2 -> Statement()
    * f3 -> [ ElseStatement() ]
    */
   public void visit(IfStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> "else"
    * f1 -> Statement()
    */
   public void visit(ElseStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "while"
    * f1 -> Expression()
    * f2 -> Statement()
    */
   public void visit(WhileStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "for"
    * f1 -> [ AssignmentStatement() ]
    * f2 -> ";"
    * f3 -> [ Expression() ]
    * f4 -> ";"
    * f5 -> [ Statement() ]
    * f6 -> Statement()
    */
   public void visit(ForStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
   }

   /**
    * f0 -> PrintlnStatement()
    *       | PrintfStatement()
    */
   public void visit(PrintStatement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "fmt.Println"
    * f1 -> StringPrint()
    */
   public void visit(PrintlnStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "fmt.Printf"
    * f1 -> StringPrint()
    */
   public void visit(PrintfStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> StringMsg()
    * f2 -> ( CommaExpression() )*
    * f3 -> ")"
    */
   public void visit(StringPrint n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> [ Operator() Expression() ]
    */
   public void visit(Expression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "+"
    *       | "-"
    *       | "*"
    *       | "/"
    *       | "%"
    *       | "<"
    *       | ">"
    *       | "=="
    *       | ">="
    *       | "<="
    *       | "!="
    *       | ">>"
    *       | "<<"
    *       | "&"
    *       | "&&"
    *       | "|"
    *       | "||"
    *       | "^"
    *       | "^="
    *       | "&="
    *       | "|="
    */
   public void visit(Operator n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> IntegerLiteral()
    *       | Identifier() PostfixExpression()
    *       | BracketExpression() ")"
    *       | StringMsg()
    *       | Identifier()
    */
   public void visit(PrimaryExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ArrayAccessExpression()
    *       | FunctionArgumentExpression()
    *       | Increment()
    *       | Decrement()
    */
   public void visit(PostfixExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "++"
    */
   public void visit(Increment n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "--"
    */
   public void visit(Decrement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( SingleArrayAccessExpression() )+
    */
   public void visit(ArrayAccessExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "["
    * f1 -> Expression()
    * f2 -> "]"
    */
   public void visit(SingleArrayAccessExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> [ ArgumentExpressionList() ]
    * f2 -> ")"
    */
   public void visit(FunctionArgumentExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Expression()
    * f1 -> ( CommaExpression() )*
    */
   public void visit(ArgumentExpressionList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public void visit(CommaExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    */
   public void visit(BracketExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "\""
    * f1 -> ( SubStrinMsg() )*
    * f2 -> "\""
    */
   public void visit(StringMsg n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    *       | "."
    *       | Operator()
    *       | ","
    *       | "\\"
    */
   public void visit(SubStrinMsg n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) {
      n.f0.accept(this, argu);
   }

}
