//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "func"
 * f1 -> Identifier()
 * f2 -> Signature()
 * f3 -> [ Type() ]
 * f4 -> "{"
 * f5 -> ( VarDeclaration() )*
 * f6 -> ( Statement() )*
 * f7 -> [ "return" Expression() ]
 * f8 -> "}"
 */
public class FunctionDeclaration implements Node {
   public NodeToken f0;
   public Identifier f1;
   public Signature f2;
   public NodeOptional f3;
   public NodeToken f4;
   public NodeListOptional f5;
   public NodeListOptional f6;
   public NodeOptional f7;
   public NodeToken f8;

   public FunctionDeclaration(NodeToken n0, Identifier n1, Signature n2, NodeOptional n3, NodeToken n4, NodeListOptional n5, NodeListOptional n6, NodeOptional n7, NodeToken n8) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
   }

   public FunctionDeclaration(Identifier n0, Signature n1, NodeOptional n2, NodeListOptional n3, NodeListOptional n4, NodeOptional n5) {
      f0 = new NodeToken("func");
      f1 = n0;
      f2 = n1;
      f3 = n2;
      f4 = new NodeToken("{");
      f5 = n3;
      f6 = n4;
      f7 = n5;
      f8 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

