//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "for"
 * f1 -> [ AssignmentStatement() ]
 * f2 -> ";"
 * f3 -> [ Expression() ]
 * f4 -> ";"
 * f5 -> [ AssignmentStatement() | IncrementStatement() ]
 * f6 -> "{"
 * f7 -> Statement()
 * f8 -> "}"
 */
public class ForStatement implements Node {
   public NodeToken f0;
   public NodeOptional f1;
   public NodeToken f2;
   public NodeOptional f3;
   public NodeToken f4;
   public NodeOptional f5;
   public NodeToken f6;
   public Statement f7;
   public NodeToken f8;

   public ForStatement(NodeToken n0, NodeOptional n1, NodeToken n2, NodeOptional n3, NodeToken n4, NodeOptional n5, NodeToken n6, Statement n7, NodeToken n8) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
   }

   public ForStatement(NodeOptional n0, NodeOptional n1, NodeOptional n2, Statement n3) {
      f0 = new NodeToken("for");
      f1 = n0;
      f2 = new NodeToken(";");
      f3 = n1;
      f4 = new NodeToken(";");
      f5 = n2;
      f6 = new NodeToken("{");
      f7 = n3;
      f8 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

