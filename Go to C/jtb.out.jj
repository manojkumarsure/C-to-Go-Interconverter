//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(GoParser)
import syntaxtree.*;
import java.util.Vector;


public class GoParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(GoParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <DOT: ".">
   | <ASSIGN: ":=">
   | <LT: "<">
   | <LTE: "<=">
   | <GT: ">">
   | <GTE: ">=">
   | <PLUS: "+">
   | <MINUS: "-">
   | <STAR: "*">
   | <DIVIDE: "/">
   | <MODULO: "%">
   | <AND: "&">
   | <OR: "|">
   | <NOT: "!">
   | <BOOLEAN: "boolean">
   | <ELSE: "else">
   | <FALSE: "false">
   | <IF: "if">
   | <WHILE: "while">
   | <INTEGER: "int">
   | <NEW: "new">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <TRUE: "true">
   | <PRINT: "fmt.Println">
   | <VOID: "void">
   | <PACKAGE: "package">
   | <IMPORT: "import">
   | <FUNC: "func">
   | <VAR: "var">
   | <FOR: "for">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   Packages n0;
   Imports n1;
   NodeListOptional n2 = new NodeListOptional();
   FunctionDeclaration n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Packages()
   n1=Imports()
   (
      n3=FunctionDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new Goal(n0,n1,n2,n4); }
}

Packages Packages() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="package" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new Packages(n0,n2); }
}

Imports Imports() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeListOptional n14 = new NodeListOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   Identifier n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(5); }
      n3="import" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5="\"" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n6=Identifier()
      { n1.addNode(n6); }
      n8="\"" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(4); }
      n11="import" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13="(" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      (
         { n15 = new NodeSequence(3); }
         n17="\"" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
         n18=Identifier()
         { n15.addNode(n18); }
         n20="\"" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n15.addNode(n19); }
         { n14.addNode(n15); }
      )*
      { n14.nodes.trimToSize(); }
      { n9.addNode(n14); }
      n22=")" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n9.addNode(n21); }
      { n0 = new NodeChoice(n9, 1); }
   )
   
   { return new Imports(n0); }
}

FunctionDeclaration FunctionDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   Signature n3;
   NodeOptional n4 = new NodeOptional();
   Type n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDeclaration n9;
   NodeListOptional n10 = new NodeListOptional();
   Statement n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   Expression n16;
   NodeToken n17;
   Token n18;

   
}
{
   n1="func" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n3=Signature()
   (
      n5=Type()
      { n4.addNode(n5); }
   )?
   n7="{" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=VarDeclaration()
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   (
      n11=Statement()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   (
      { n13 = new NodeSequence(2); }
      n15="return" { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n16=Expression()
      { n13.addNode(n16); }
      { n12.addNode(n13); }
   )?
   n18="}" { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new FunctionDeclaration(n0,n2,n3,n4,n6,n8,n10,n12,n17); }
}

Signature Signature() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   Type n6;
   NodeListOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeOptional n12;
   Type n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n7 = new NodeListOptional(); }
      { n3 = new NodeSequence(3); }
      n4=Identifier()
      { n3.addNode(n4); }
      (
         n6=Type()
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      (
         { n12 = new NodeOptional(); }
         { n8 = new NodeSequence(3); }
         n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n11=Identifier()
         { n8.addNode(n11); }
         (
            n13=Type()
            { n12.addNode(n13); }
         )?
         { n8.addNode(n12); }
         { n7.addNode(n8); }
      )*
      { n7.nodes.trimToSize(); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new Signature(n0,n2,n14); }
}

Type Type() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Type(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   Block n1;
   AssignmentStatement n2;
   IfStatement n3;
   WhileStatement n4;
   ForStatement n5;
   PrintStatement n6;

   
}
{
   (
      n1=Block()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AssignmentStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=IfStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=WhileStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ForStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=PrintStatement()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new Statement(n0); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   VarDeclaration n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=VarDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   (
      n5=Statement()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Block(n0,n2,n4,n6); }
}

VarDeclaration VarDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   Type n8;

   
}
{
   n1="var" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n8=Type()
   
   { return new VarDeclaration(n0,n2,n3,n8); }
}

AssignmentStatement AssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   
   { return new AssignmentStatement(n0,n1,n3); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   Statement n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Statement n8;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n3=Statement()
   (
      LOOKAHEAD(2)
      { n5 = new NodeSequence(2); }
      n7="else" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=Statement()
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   
   { return new IfStatement(n0,n2,n3,n4); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   Statement n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Statement()
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new WhileStatement(n0,n2,n3,n5,n6); }
}

ForStatement ForStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   AssignmentStatement n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeChoice n11;
   AssignmentStatement n12;
   IncrementStatement n13;
   NodeToken n14;
   Token n15;
   Statement n16;
   NodeToken n17;
   Token n18;

   
}
{
   n1="for" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=AssignmentStatement()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=Expression()
      { n6.addNode(n7); }
   )?
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      (
         LOOKAHEAD(3)
         n12=AssignmentStatement()
         { n11 = new NodeChoice(n12, 0); }
      |
         n13=IncrementStatement()
         { n11 = new NodeChoice(n13, 1); }
      )
      { n10.addNode(n11); }
   )?
   n15="{" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Statement()
   n18="}" { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new ForStatement(n0,n2,n4,n6,n8,n10,n14,n16,n17); }
}

IncrementStatement IncrementStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeSequence n9;
   Identifier n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   Identifier n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3="++" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Identifier()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n7="--" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=Identifier()
      { n5.addNode(n8); }
      { n0 = new NodeChoice(n5, 1); }
   |
      LOOKAHEAD(2)
      { n9 = new NodeSequence(3); }
      n10=Identifier()
      { n9.addNode(n10); }
      n12="++" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n9.addNode(n11); }
      { n0 = new NodeChoice(n9, 2); }
   |
      { n13 = new NodeSequence(2); }
      n14=Identifier()
      { n13.addNode(n14); }
      n16="--" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n13.addNode(n15); }
      { n0 = new NodeChoice(n13, 3); }
   )
   
   { return new IncrementStatement(n0); }
}

PrintStatement PrintStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Expression n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3="fmt.Println" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n6=Expression()
      { n1.addNode(n6); }
      n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(4); }
      n11="fmt.Printf" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13="(" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      n14=Expression()
      { n9.addNode(n14); }
      n16=")" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n9.addNode(n15); }
      { n0 = new NodeChoice(n9, 1); }
   )
   
   { return new PrintStatement(n0); }
}

Expression Expression() :
{
   NodeChoice n0;
   AndExpression n1;
   CompareExpression n2;
   EqualityExpression n3;
   PlusExpression n4;
   MinusExpression n5;
   TimesExpression n6;
   PrimaryExpression n7;

   
}
{
   (
      LOOKAHEAD(PrimaryExpression() "&")
      n1=AndExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(PrimaryExpression() "<")
      n2=CompareExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(PrimaryExpression() "==")
      n3=EqualityExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(PrimaryExpression() "+")
      n4=PlusExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(PrimaryExpression() "-")
      n5=MinusExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(PrimaryExpression() "*")
      n6=TimesExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=PrimaryExpression()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new Expression(n0); }
}

AndExpression AndExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="&" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new AndExpression(n0,n1,n3); }
}

CompareExpression CompareExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="<" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareExpression(n0,n1,n3); }
}

EqualityExpression EqualityExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="==" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new EqualityExpression(n0,n1,n3); }
}

PlusExpression PlusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="-" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesExpression TimesExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new TimesExpression(n0,n1,n3); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   Identifier n2;
   BracketExpression n3;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Identifier()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BracketExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BracketExpression(n0,n2,n3); }
}
