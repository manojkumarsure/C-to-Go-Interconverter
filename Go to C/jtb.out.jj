//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(GoParser)
import syntaxtree.*;
import java.util.Vector;


public class GoParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(GoParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <COLON: ":">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <LT: "<">
   | <GT: ">">
   | <PLUS: "+">
   | <MINUS: "-">
   | <STAR: "*">
   | <DIVIDE: "/">
   | <MODULO: "%">
   | <AND: "&">
   | <OR: "|">
   | <NOT: "!">
   | <BOOLEAN: "boolean">
   | <ELSE: "else">
   | <FALSE: "false">
   | <IF: "if">
   | <WHILE: "while">
   | <FOR: "for">
   | <INTEGER: "int">
   | <NEW: "new">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <TRUE: "true">
   | <PRINT1: "fmt.Println">
   | <PRINT2: "fmt.Printf">
   | <VOID: "void">
   | <PACKAGE: "package">
   | <IMPORT: "import">
   | <FUNC: "func">
   | <VAR: "var">
   | <MAIN: "main">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   Packages n0;
   Imports n1;
   NodeListOptional n2 = new NodeListOptional();
   FunctionDeclaration n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Packages()
   n1=Imports()
   (
      n3=FunctionDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new Goal(n0,n1,n2,n4); }
}

Packages Packages() :
{
   NodeChoice n0;
   PackageOther n1;
   PackageMain n2;

   
}
{
   (
      LOOKAHEAD(2)
      n1=PackageOther()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PackageMain()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Packages(n0); }
}

PackageOther PackageOther() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="package" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new PackageOther(n0,n2); }
}

PackageMain PackageMain() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="package" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="main" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PackageMain(n0,n2); }
}

Imports Imports() :
{
   NodeChoice n0;
   SingleImport n1;
   MultipleImport n2;

   
}
{
   (
      LOOKAHEAD(2)
      n1=SingleImport()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=MultipleImport()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Imports(n0); }
}

SingleImport SingleImport() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="import" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="\"" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="\"" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new SingleImport(n0,n2,n4,n5); }
}

MultipleImport MultipleImport() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="import" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(3); }
      n7="\"" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=Identifier()
      { n5.addNode(n8); }
      n10="\"" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new MultipleImport(n0,n2,n4,n11); }
}

FunctionDeclaration FunctionDeclaration() :
{
   NodeChoice n0;
   MainFunctionDeclaration n1;
   OtherFunctionDeclaration n2;

   
}
{
   (
      LOOKAHEAD(2)
      n1=MainFunctionDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=OtherFunctionDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new FunctionDeclaration(n0); }
}

MainFunctionDeclaration MainFunctionDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   VarDeclaration n11;
   NodeListOptional n12 = new NodeListOptional();
   Statement n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1="func" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="main" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9="{" { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      n11=VarDeclaration()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   (
      n13=Statement()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   n15="}" { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new MainFunctionDeclaration(n0,n2,n4,n6,n8,n10,n12,n14); }
}

OtherFunctionDeclaration OtherFunctionDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   Signature n3;
   NodeOptional n4 = new NodeOptional();
   Type n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDeclaration n9;
   NodeListOptional n10 = new NodeListOptional();
   Statement n11;
   NodeOptional n12 = new NodeOptional();
   ReturnExpression n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1="func" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n3=Signature()
   (
      n5=Type()
      { n4.addNode(n5); }
   )?
   n7="{" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=VarDeclaration()
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   (
      n11=Statement()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   (
      n13=ReturnExpression()
      { n12.addNode(n13); }
   )?
   n15="}" { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new OtherFunctionDeclaration(n0,n2,n3,n4,n6,n8,n10,n12,n14); }
}

ReturnExpression ReturnExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="return" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new ReturnExpression(n0,n2); }
}

Signature Signature() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   VarType n4;
   NodeListOptional n5;
   CommaVarType n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeListOptional(); }
      { n3 = new NodeSequence(2); }
      n4=VarType()
      { n3.addNode(n4); }
      (
         n6=CommaVarType()
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Signature(n0,n2,n7); }
}

VarType VarType() :
{
   Identifier n0;
   Type n1;

   
}
{
   n0=Identifier()
   n1=Type()
   
   { return new VarType(n0,n1); }
}

CommaVarType CommaVarType() :
{
   NodeToken n0;
   Token n1;
   VarType n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=VarType()
   
   { return new CommaVarType(n0,n2); }
}

Type Type() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Type(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   PrintStatement n1;
   Block n2;
   IfStatement n3;
   WhileStatement n4;
   ForStatement n5;
   AssignmentStatement n6;
   Expression n7;

   
}
{
   (
      n1=PrintStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Block()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=IfStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=WhileStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ForStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(3)
      n6=AssignmentStatement()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Expression()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new Statement(n0); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   VarDeclaration n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=VarDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   (
      n5=Statement()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Block(n0,n2,n4,n6); }
}

VarDeclaration VarDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   CommaIdentifier n4;
   Type n5;

   
}
{
   n1="var" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      n4=CommaIdentifier()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n5=Type()
   
   { return new VarDeclaration(n0,n2,n3,n5); }
}

CommaIdentifier CommaIdentifier() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new CommaIdentifier(n0,n2); }
}

AssignmentStatement AssignmentStatement() :
{
   PrimaryExpression n0;
   AssignmentOperator n1;
   Expression n2;

   
}
{
   n0=PrimaryExpression()
   n1=AssignmentOperator()
   n2=Expression()
   
   { return new AssignmentStatement(n0,n1,n2); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="*=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="/=" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="%=" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="+=" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="-=" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="<<=" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=">>=" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="&=" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="^=" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="|=" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   )
   
   { return new AssignmentOperator(n0); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   Statement n3;
   NodeOptional n4 = new NodeOptional();
   ElseStatement n5;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n3=Statement()
   (
      LOOKAHEAD(2)
      n5=ElseStatement()
      { n4.addNode(n5); }
   )?
   
   { return new IfStatement(n0,n2,n3,n4); }
}

ElseStatement ElseStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;

   
}
{
   n1="else" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   
   { return new ElseStatement(n0,n2); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   Statement n3;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n3=Statement()
   
   { return new WhileStatement(n0,n2,n3); }
}

ForStatement ForStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   AssignmentStatement n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   Statement n11;
   Statement n12;

   
}
{
   n1="for" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=AssignmentStatement()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=Expression()
      { n6.addNode(n7); }
   )?
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      LOOKAHEAD(2)
      n11=Statement()
      { n10.addNode(n11); }
   )?
   n12=Statement()
   
   { return new ForStatement(n0,n2,n4,n6,n8,n10,n12); }
}

PrintStatement PrintStatement() :
{
   NodeChoice n0;
   PrintlnStatement n1;
   PrintfStatement n2;

   
}
{
   (
      n1=PrintlnStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PrintfStatement()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new PrintStatement(n0); }
}

PrintlnStatement PrintlnStatement() :
{
   NodeToken n0;
   Token n1;
   StringPrint n2;

   
}
{
   n1="fmt.Println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=StringPrint()
   
   { return new PrintlnStatement(n0,n2); }
}

PrintfStatement PrintfStatement() :
{
   NodeToken n0;
   Token n1;
   StringPrint n2;

   
}
{
   n1="fmt.Printf" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=StringPrint()
   
   { return new PrintfStatement(n0,n2); }
}

StringPrint StringPrint() :
{
   NodeToken n0;
   Token n1;
   StringMsg n2;
   NodeListOptional n3 = new NodeListOptional();
   CommaExpression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=StringMsg()
   (
      n4=CommaExpression()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new StringPrint(n0,n2,n3,n5); }
}

Expression Expression() :
{
   PrimaryExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   Operator n3;
   Expression n4;

   
}
{
   n0=PrimaryExpression()
   (
      { n2 = new NodeSequence(2); }
      n3=Operator()
      { n2.addNode(n3); }
      n4=Expression()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )?
   
   { return new Expression(n0,n1); }
}

Operator Operator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;

   
}
{
   (
      n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="-" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="*" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="/" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="%" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="<" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=">" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="==" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=">=" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="<=" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="!=" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=">>" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26="<<" { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28="&" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30="&&" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32="|" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34="||" { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36="^" { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38="^=" { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40="&=" { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42="|=" { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   )
   
   { return new Operator(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   NodeSequence n2;
   Identifier n3;
   PostfixExpression n4;
   NodeSequence n5;
   BracketExpression n6;
   NodeToken n7;
   Token n8;
   StringMsg n9;
   Identifier n10;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      { n2 = new NodeSequence(3); }
      n3=Identifier()
      { n2.addNode(n3); }
      n4=PostfixExpression()
      { n2.addNode(n4); }
      { n0 = new NodeChoice(n2, 1); }
   |
      { n5 = new NodeSequence(2); }
      n6=BracketExpression()
      { n5.addNode(n6); }
      n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n9=StringMsg()
      { n0 = new NodeChoice(n9, 3); }
   |
      n10=Identifier()
      { n0 = new NodeChoice(n10, 4); }
   )
   
   { return new PrimaryExpression(n0); }
}

PostfixExpression PostfixExpression() :
{
   NodeChoice n0;
   ArrayAccessExpression n1;
   FunctionArgumentExpression n2;
   Increment n3;
   Decrement n4;

   
}
{
   (
      n1=ArrayAccessExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=FunctionArgumentExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Increment()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Decrement()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new PostfixExpression(n0); }
}

Increment Increment() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Increment(n0); }
}

Decrement Decrement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Decrement(n0); }
}

ArrayAccessExpression ArrayAccessExpression() :
{
   NodeList n0 = new NodeList();
   SingleArrayAccessExpression n1;

   
}
{
   (
      n1=SingleArrayAccessExpression()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new ArrayAccessExpression(n0); }
}

SingleArrayAccessExpression SingleArrayAccessExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new SingleArrayAccessExpression(n0,n2,n3); }
}

FunctionArgumentExpression FunctionArgumentExpression() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentExpressionList n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(ArgumentExpressionList())
      n3=ArgumentExpressionList()
      { n2.addNode(n3); }
   )?
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new FunctionArgumentExpression(n0,n2,n4); }
}

ArgumentExpressionList ArgumentExpressionList() :
{
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   CommaExpression n2;

   
}
{
   n0=Expression()
   (
      n2=CommaExpression()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgumentExpressionList(n0,n1); }
}

CommaExpression CommaExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new CommaExpression(n0,n2); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new BracketExpression(n0,n2); }
}

StringMsg StringMsg() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   SubStrinMsg n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="\"" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=SubStrinMsg()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="\"" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new StringMsg(n0,n2,n4); }
}

SubStrinMsg SubStrinMsg() :
{
   NodeChoice n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Operator n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n1=Identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n4=Operator()
      { n0 = new NodeChoice(n4, 2); }
   |
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 3); }
   |
      n8="\\" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 4); }
   )
   
   { return new SubStrinMsg(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}
