/* Generated By:JavaCC: Do not edit this line. CParser.java */
import java.util.*;
import syntaxtree.*;
import java.util.Vector;


public class CParser implements CParserConstants {
   private static Set types = new HashSet();
   private static Stack typedefParsingStack = new Stack();
   private static boolean isType(String type)
   {
      return types.contains(type);
   }
   private static void addType(String type)
   {
      types.add(type);
   }
   private static void printTypes()
   {
      for ( Iterator i = types.iterator(); i.hasNext();  )
      {
         System.out.println(i.next());
      }
   }
   public static void main(String args[])
   {
      CParser parser;
      types.add("__signed__");
      types.add("__const");
      types.add("__inline__");
      types.add("__signed");
      if ( args.length == 0 )
      {
         System.out.println("C Parser Version 0.1Alpha:  Reading from standard input . . .");
         parser = new CParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("C Parser Version 0.1Alpha:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new CParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("C Parser Version 0.1:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("C Parser Version 0.1Alpha:  Usage is one of:");
            System.out.println("         java CParser < inputfile");
            System.out.println("OR");
            System.out.println("         java CParser inputfile");
            return;
         }
      try
      {
         parser.TranslationUnit();
         System.out.println("C Parser Version 0.1Alpha:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println("C Parser Version 0.1Alpha:  Encountered errors during parse.");
         e.printStackTrace();
      }
   }

  static final public TranslationUnit TranslationUnit() throws ParseException {
   NodeList n0 = new NodeList();
   ExternalDeclaration n1;
    label_1:
    while (true) {
      n1 = ExternalDeclaration();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case FLOAT:
      case LONG:
      case VOID:
      case CHAR:
      case INT:
      case IDENTIFIER:
      case 44:
      case 48:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
     n0.nodes.trimToSize();
      printTypes();
     {if (true) return new TranslationUnit(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExternalDeclaration ExternalDeclaration() throws ParseException {
   NodeChoice n0;
   FunctionDefinition n1;
   Declaration n2;
    if (jj_2_1(2147483647)) {
      n1 = FunctionDefinition();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case FLOAT:
      case LONG:
      case VOID:
      case CHAR:
      case INT:
        n2 = Declaration();
           n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ExternalDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDefinition FunctionDefinition() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   DeclarationSpecifiers n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationList n4;
   CompoundStatement n5;
    if (jj_2_2(2147483647)) {
      n1 = DeclarationSpecifiers();
        n0.addNode(n1);
    } else {
      ;
    }
    n2 = Declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE:
    case FLOAT:
    case LONG:
    case VOID:
    case CHAR:
    case INT:
      n4 = DeclarationList();
        n3.addNode(n4);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n5 = CompoundStatement();
     {if (true) return new FunctionDefinition(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Declaration Declaration() throws ParseException {
   DeclarationSpecifiers n0;
   NodeOptional n1 = new NodeOptional();
   InitDeclaratorList n2;
   NodeToken n3;
   Token n4;
    n0 = DeclarationSpecifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 44:
    case 48:
      n2 = InitDeclaratorList();
        n1.addNode(n2);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n4 = jj_consume_token(41);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Declaration(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DeclarationList DeclarationList() throws ParseException {
   NodeList n0 = new NodeList();
   Declaration n1;
    label_2:
    while (true) {
      n1 = Declaration();
        n0.addNode(n1);
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_2;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new DeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DeclarationSpecifiers DeclarationSpecifiers() throws ParseException {
   TypeSpecifier n0;
   NodeOptional n1 = new NodeOptional();
   DeclarationSpecifiers n2;
    n0 = TypeSpecifier();
    if (jj_2_4(2147483647)) {
      n2 = DeclarationSpecifiers();
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new DeclarationSpecifiers(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeSpecifier TypeSpecifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n2 = jj_consume_token(VOID);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case CHAR:
      n4 = jj_consume_token(CHAR);
                     n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case INT:
      n6 = jj_consume_token(INT);
                    n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case LONG:
      n8 = jj_consume_token(LONG);
                     n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case FLOAT:
      n10 = jj_consume_token(FLOAT);
                       n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case DOUBLE:
      n12 = jj_consume_token(DOUBLE);
                        n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public InitDeclaratorList InitDeclaratorList() throws ParseException {
   InitDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitDeclarator n5;
    n0 = InitDeclarator();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InitDeclarator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
      if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
      {
         typedefParsingStack.pop();
      }
     {if (true) return new InitDeclaratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public InitDeclarator InitDeclarator() throws ParseException {
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;
    n0 = Declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(43);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Initializer();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
     {if (true) return new InitDeclarator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public SpecifierQualifierList SpecifierQualifierList() throws ParseException {
   TypeSpecifier n0;
   NodeOptional n1 = new NodeOptional();
   SpecifierQualifierList n2;
    n0 = TypeSpecifier();
    if (jj_2_5(2147483647)) {
      n2 = SpecifierQualifierList();
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new SpecifierQualifierList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public EnumeratorList EnumeratorList() throws ParseException {
   Enumerator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Enumerator n5;
    n0 = Enumerator();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Enumerator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new EnumeratorList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Enumerator Enumerator() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(43);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = ConstantExpression();
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
     {if (true) return new Enumerator(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Declarator Declarator() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectDeclarator n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      n1 = Pointer();
        n0.addNode(n1);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    n2 = DirectDeclarator();
     {if (true) return new Declarator(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DirectDeclarator DirectDeclarator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Declarator n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   ConstantExpression n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   ParameterTypeList n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   IdentifierList n28;
   NodeToken n29;
   Token n30;

   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                           n1 = JTBToolkit.makeNodeToken(n2);t=n2;
            if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
            {
               addType(t.image);
            }
           n0 = new NodeChoice(n1, 0);
      break;
    case 44:
           n3 = new NodeSequence(3);
      n5 = jj_consume_token(44);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
      n6 = Declarator();
           n3.addNode(n6);
      n8 = jj_consume_token(45);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      typedefParsingStack.push(Boolean.FALSE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 46:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
        n14 = new NodeOptional();
        n27 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
           n11 = new NodeSequence(3);
        n13 = jj_consume_token(46);
                   n12 = JTBToolkit.makeNodeToken(n13);
           n11.addNode(n12);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 44:
        case 48:
        case 68:
        case 77:
        case 78:
        case 81:
        case 82:
        case 83:
        case 84:
          n15 = ConstantExpression();
              n14.addNode(n15);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
           n11.addNode(n14);
        n17 = jj_consume_token(47);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n11.addNode(n16);
           n10 = new NodeChoice(n11, 0);
        break;
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_6(3)) {
           n18 = new NodeSequence(4);
          n20 = jj_consume_token(44);
                   n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
          n21 = ParameterTypeList();
           n18.addNode(n21);
          n23 = jj_consume_token(45);
                   n22 = JTBToolkit.makeNodeToken(n23);
           n18.addNode(n22);
           n10 = new NodeChoice(n18, 1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 44:
           n24 = new NodeSequence(3);
            n26 = jj_consume_token(44);
                   n25 = JTBToolkit.makeNodeToken(n26);
           n24.addNode(n25);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              n28 = IdentifierList();
              n27.addNode(n28);
              break;
            default:
              jj_la1[13] = jj_gen;
              ;
            }
           n24.addNode(n27);
            n30 = jj_consume_token(45);
                   n29 = JTBToolkit.makeNodeToken(n30);
           n24.addNode(n29);
           n10 = new NodeChoice(n24, 2);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
      typedefParsingStack.pop();
     {if (true) return new DirectDeclarator(n0,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Pointer Pointer() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Pointer n3;
    n1 = jj_consume_token(48);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      n3 = Pointer();
        n2.addNode(n3);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
     {if (true) return new Pointer(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterTypeList ParameterTypeList() throws ParseException {
   ParameterList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n0 = ParameterList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(49);
                 n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
     {if (true) return new ParameterTypeList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterList ParameterList() throws ParseException {
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;
    n0 = ParameterDeclaration();
    label_6:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_6;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ParameterDeclaration();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterDeclaration ParameterDeclaration() throws ParseException {
   DeclarationSpecifiers n0;
   NodeChoice n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   AbstractDeclarator n4;
    n0 = DeclarationSpecifiers();
    if (jj_2_8(2147483647)) {
      n2 = Declarator();
           n1 = new NodeChoice(n2, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 46:
      case 48:
        n4 = AbstractDeclarator();
              n3.addNode(n4);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
           n1 = new NodeChoice(n3, 1);
    }
     {if (true) return new ParameterDeclaration(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierList IdentifierList() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(42);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new IdentifierList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Initializer Initializer() throws ParseException {
   NodeChoice n0;
   AssignmentExpression n1;
   Initializer1 n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 44:
    case 48:
    case 68:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 84:
      n1 = AssignmentExpression();
           n0 = new NodeChoice(n1, 0);
      break;
    case 50:
      n2 = Initializer1();
           n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Initializer(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Initializer1 Initializer1() throws ParseException {
   NodeToken n0;
   Token n1;
   InitializerList n2;
   NodeOptional n3 = new NodeOptional();
   comma n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(50);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = InitializerList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      n4 = comma();
        n3.addNode(n4);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    n6 = jj_consume_token(51);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Initializer1(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public comma comma() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(42);
            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new comma(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public InitializerList InitializerList() throws ParseException {
   Initializer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;
    n0 = Initializer();
    label_8:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_8;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Initializer();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new InitializerList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeName TypeName() throws ParseException {
   SpecifierQualifierList n0;
   NodeOptional n1 = new NodeOptional();
   AbstractDeclarator n2;
    n0 = SpecifierQualifierList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 46:
    case 48:
      n2 = AbstractDeclarator();
        n1.addNode(n2);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
     {if (true) return new TypeName(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractDeclarator AbstractDeclarator() throws ParseException {
   NodeChoice n0;
   Pointer n1;
   AbstractDeclarator1 n2;
    if (jj_2_10(3)) {
      n1 = Pointer();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 46:
      case 48:
        n2 = AbstractDeclarator1();
           n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AbstractDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AbstractDeclarator1 AbstractDeclarator1() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectAbstractDeclarator n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      n1 = Pointer();
        n0.addNode(n1);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    n2 = DirectAbstractDeclarator();
     {if (true) return new AbstractDeclarator1(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DirectAbstractDeclarator DirectAbstractDeclarator() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   AbstractDeclarator n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ConstantExpression n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   ParameterTypeList n18;
   NodeToken n19;
   Token n20;
   NodeListOptional n21 = new NodeListOptional();
   NodeChoice n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   ConstantExpression n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33;
   ParameterTypeList n34;
   NodeToken n35;
   Token n36;
    if (jj_2_11(2)) {
           n1 = new NodeSequence(4);
      n3 = jj_consume_token(44);
                  n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = AbstractDeclarator();
           n1.addNode(n4);
      n6 = jj_consume_token(45);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n1.addNode(n5);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
           n7 = new NodeSequence(3);
        n9 = jj_consume_token(46);
                  n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 44:
        case 48:
        case 68:
        case 77:
        case 78:
        case 81:
        case 82:
        case 83:
        case 84:
          n11 = ConstantExpression();
              n10.addNode(n11);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
           n7.addNode(n10);
        n13 = jj_consume_token(47);
                   n12 = JTBToolkit.makeNodeToken(n13);
           n7.addNode(n12);
           n0 = new NodeChoice(n7, 1);
        break;
      case 44:
           n14 = new NodeSequence(3);
        n16 = jj_consume_token(44);
                   n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE:
        case FLOAT:
        case LONG:
        case VOID:
        case CHAR:
        case INT:
          n18 = ParameterTypeList();
              n17.addNode(n18);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
           n14.addNode(n17);
        n20 = jj_consume_token(45);
                   n19 = JTBToolkit.makeNodeToken(n20);
           n14.addNode(n19);
           n0 = new NodeChoice(n14, 2);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 46:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
        n26 = new NodeOptional();
        n33 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
           n23 = new NodeSequence(3);
        n25 = jj_consume_token(46);
                   n24 = JTBToolkit.makeNodeToken(n25);
           n23.addNode(n24);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 44:
        case 48:
        case 68:
        case 77:
        case 78:
        case 81:
        case 82:
        case 83:
        case 84:
          n27 = ConstantExpression();
              n26.addNode(n27);
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
           n23.addNode(n26);
        n29 = jj_consume_token(47);
                   n28 = JTBToolkit.makeNodeToken(n29);
           n23.addNode(n28);
           n22 = new NodeChoice(n23, 0);
        break;
      case 44:
           n30 = new NodeSequence(3);
        n32 = jj_consume_token(44);
                   n31 = JTBToolkit.makeNodeToken(n32);
           n30.addNode(n31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE:
        case FLOAT:
        case LONG:
        case VOID:
        case CHAR:
        case INT:
          n34 = ParameterTypeList();
              n33.addNode(n34);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
           n30.addNode(n33);
        n36 = jj_consume_token(45);
                   n35 = JTBToolkit.makeNodeToken(n36);
           n30.addNode(n35);
           n22 = new NodeChoice(n30, 1);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n21.addNode(n22);
    }
     n21.nodes.trimToSize();
     {if (true) return new DirectAbstractDeclarator(n0,n21);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   LabeledStatement n1;
   ExpressionStatement n2;
   CompoundStatement n3;
   SelectionStatement n4;
   IterationStatement n5;
   JumpStatement n6;
    if (jj_2_12(2)) {
      n1 = LabeledStatement();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 41:
      case 44:
      case 48:
      case 68:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        n2 = ExpressionStatement();
           n0 = new NodeChoice(n2, 1);
        break;
      case 50:
        n3 = CompoundStatement();
           n0 = new NodeChoice(n3, 2);
        break;
      case SWITCH:
      case IF:
        n4 = SelectionStatement();
           n0 = new NodeChoice(n4, 3);
        break;
      case WHILE:
      case FOR:
      case DO:
        n5 = IterationStatement();
           n0 = new NodeChoice(n5, 4);
        break;
      case CONTINUE:
      case RETURN:
      case BREAK:
      case GOTO:
        n6 = JumpStatement();
           n0 = new NodeChoice(n6, 5);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LabeledStatement LabeledStatement() throws ParseException {
   NodeChoice n0;
   GotoLabel n1;
   CaseLabel n2;
   DefaultLabel n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = GotoLabel();
           n0 = new NodeChoice(n1, 0);
      break;
    case CASE:
      n2 = CaseLabel();
           n0 = new NodeChoice(n2, 1);
      break;
    case DFLT:
      n3 = DefaultLabel();
           n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LabeledStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public GotoLabel GotoLabel() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(52);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Statement();
     {if (true) return new GotoLabel(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public CaseLabel CaseLabel() throws ParseException {
   NodeToken n0;
   Token n1;
   ConstantExpression n2;
   NodeToken n3;
   Token n4;
   Statement n5;
    n1 = jj_consume_token(CASE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ConstantExpression();
    n4 = jj_consume_token(52);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Statement();
     {if (true) return new CaseLabel(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public DefaultLabel DefaultLabel() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;
    n1 = jj_consume_token(DFLT);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(52);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Statement();
     {if (true) return new DefaultLabel(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionStatement ExpressionStatement() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Expression n1;
   NodeToken n2;
   Token n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 44:
    case 48:
    case 68:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 84:
      n1 = Expression();
        n0.addNode(n1);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    n3 = jj_consume_token(41);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ExpressionStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CompoundStatement CompoundStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   DeclarationList n3;
   NodeOptional n4 = new NodeOptional();
   StatementList n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(50);
            n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_13(2147483647)) {
      n3 = DeclarationList();
        n2.addNode(n3);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case CONTINUE:
    case DFLT:
    case SWITCH:
    case RETURN:
    case WHILE:
    case BREAK:
    case CASE:
    case GOTO:
    case FOR:
    case IF:
    case DO:
    case IDENTIFIER:
    case 41:
    case 44:
    case 48:
    case 50:
    case 68:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 84:
      n5 = StatementList();
        n4.addNode(n5);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    n7 = jj_consume_token(51);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new CompoundStatement(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public StatementList StatementList() throws ParseException {
   NodeList n0 = new NodeList();
   Statement n1;
    label_10:
    while (true) {
      n1 = Statement();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case DFLT:
      case SWITCH:
      case RETURN:
      case WHILE:
      case BREAK:
      case CASE:
      case GOTO:
      case FOR:
      case IF:
      case DO:
      case IDENTIFIER:
      case 41:
      case 44:
      case 48:
      case 50:
      case 68:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_10;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new StatementList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SelectionStatement SelectionStatement() throws ParseException {
   NodeChoice n0;
   IfStatement n1;
   SwitchStatement n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      n1 = IfStatement();
           n0 = new NodeChoice(n1, 0);
      break;
    case SWITCH:
      n2 = SwitchStatement();
           n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SelectionStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Statement n12;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(44);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(45);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    if (jj_2_14(2)) {
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(ELSE);
                   n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = Statement();
        n9.addNode(n12);
        n8.addNode(n9);
    } else {
      ;
    }
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchStatement SwitchStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(SWITCH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(44);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(45);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new SwitchStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public IterationStatement IterationStatement() throws ParseException {
   NodeChoice n0;
   WhileStatement n1;
   DoWhileStatement n2;
   ForStatement n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      n1 = WhileStatement();
           n0 = new NodeChoice(n1, 0);
      break;
    case DO:
      n2 = DoWhileStatement();
           n0 = new NodeChoice(n2, 1);
      break;
    case FOR:
      n3 = ForStatement();
           n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new IterationStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(44);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(45);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DoWhileStatement DoWhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(DO);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
    n4 = jj_consume_token(WHILE);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(44);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(45);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(41);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new DoWhileStatement(n0,n2,n3,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public ForStatement ForStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Expression n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   Expression n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   Expression n13;
   NodeToken n14;
   Token n15;
   Statement n16;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(44);
            n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 44:
    case 48:
    case 68:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 84:
      n5 = Expression();
        n4.addNode(n5);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    n7 = jj_consume_token(41);
            n6 = JTBToolkit.makeNodeToken(n7);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 44:
    case 48:
    case 68:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 84:
      n9 = Expression();
        n8.addNode(n9);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    n11 = jj_consume_token(41);
             n10 = JTBToolkit.makeNodeToken(n11);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 44:
    case 48:
    case 68:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 84:
      n13 = Expression();
        n12.addNode(n13);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    n15 = jj_consume_token(45);
             n14 = JTBToolkit.makeNodeToken(n15);
    n16 = Statement();
     {if (true) return new ForStatement(n0,n2,n4,n6,n8,n10,n12,n14,n16);}
    throw new Error("Missing return statement in function");
  }

  static final public JumpStatement JumpStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   Expression n22;
   NodeToken n23;
   Token n24;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GOTO:
           n1 = new NodeSequence(3);
      n3 = jj_consume_token(GOTO);
                     n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n5 = jj_consume_token(IDENTIFIER);
                           n4 = JTBToolkit.makeNodeToken(n5);
           n1.addNode(n4);
      n7 = jj_consume_token(41);
                  n6 = JTBToolkit.makeNodeToken(n7);
           n1.addNode(n6);
           n0 = new NodeChoice(n1, 0);
      break;
    case CONTINUE:
           n8 = new NodeSequence(2);
      n10 = jj_consume_token(CONTINUE);
                          n9 = JTBToolkit.makeNodeToken(n10);
           n8.addNode(n9);
      n12 = jj_consume_token(41);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n8.addNode(n11);
           n0 = new NodeChoice(n8, 1);
      break;
    case BREAK:
           n13 = new NodeSequence(2);
      n15 = jj_consume_token(BREAK);
                       n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
      n17 = jj_consume_token(41);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n13.addNode(n16);
           n0 = new NodeChoice(n13, 2);
      break;
    case RETURN:
           n18 = new NodeSequence(3);
      n20 = jj_consume_token(RETURN);
                        n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 44:
      case 48:
      case 68:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        n22 = Expression();
              n21.addNode(n22);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
           n18.addNode(n21);
      n24 = jj_consume_token(41);
                   n23 = JTBToolkit.makeNodeToken(n24);
           n18.addNode(n23);
           n0 = new NodeChoice(n18, 3);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new JumpStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;
    n0 = AssignmentExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_11;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentExpression AssignmentExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   UnaryExpression n2;
   AssignmentOperator n3;
   AssignmentExpression n4;
   ConditionalExpression n5;
    if (jj_2_15(2147483647)) {
        n1 = new NodeSequence(4);
      n2 = UnaryExpression();
        n1.addNode(n2);
      n3 = AssignmentOperator();
        n1.addNode(n3);
      n4 = AssignmentExpression();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_16(3)) {
      n5 = ConditionalExpression();
        n0 = new NodeChoice(n5, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentOperator AssignmentOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      n2 = jj_consume_token(43);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case 53:
      n4 = jj_consume_token(53);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case 54:
      n6 = jj_consume_token(54);
                   n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case 55:
      n8 = jj_consume_token(55);
                   n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case 56:
      n10 = jj_consume_token(56);
                    n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case 57:
      n12 = jj_consume_token(57);
                    n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case 58:
      n14 = jj_consume_token(58);
                     n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case 59:
      n16 = jj_consume_token(59);
                     n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case 60:
      n18 = jj_consume_token(60);
                    n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    case 61:
      n20 = jj_consume_token(61);
                    n19 = JTBToolkit.makeNodeToken(n20);
           n0 = new NodeChoice(n19, 9);
      break;
    case 62:
      n22 = jj_consume_token(62);
                    n21 = JTBToolkit.makeNodeToken(n22);
           n0 = new NodeChoice(n21, 10);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalExpression ConditionalExpression() throws ParseException {
   LogicalORExpression n0;
   NodeOptional n1 = new NodeOptional();
   ConditionalSubExpression n2;
    n0 = LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      n2 = ConditionalSubExpression();
        n1.addNode(n2);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
     {if (true) return new ConditionalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalSubExpression ConditionalSubExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   ConditionalExpression n5;
    n1 = jj_consume_token(63);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(52);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ConditionalExpression();
     {if (true) return new ConditionalSubExpression(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantExpression ConstantExpression() throws ParseException {
   ConditionalExpression n0;
    n0 = ConditionalExpression();
     {if (true) return new ConstantExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LogicalORExpression LogicalORExpression() throws ParseException {
   LogicalANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalORExpression n5;
    n0 = LogicalANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(64);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
     {if (true) return new LogicalORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public LogicalANDExpression LogicalANDExpression() throws ParseException {
   InclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalANDExpression n5;
    n0 = InclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(65);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = LogicalANDExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
     {if (true) return new LogicalANDExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public InclusiveORExpression InclusiveORExpression() throws ParseException {
   ExclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveORExpression n5;
    n0 = ExclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(66);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InclusiveORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
     {if (true) return new InclusiveORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExclusiveORExpression ExclusiveORExpression() throws ParseException {
   ANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveORExpression n5;
    n0 = ANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(67);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExclusiveORExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
     {if (true) return new ExclusiveORExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ANDExpression ANDExpression() throws ParseException {
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ANDExpression n5;
    n0 = EqualityExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(68);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ANDExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
     {if (true) return new ANDExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityExpression EqualityExpression() throws ParseException {
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   EqualitySymbols n2;
    n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
    case 70:
      n2 = EqualitySymbols();
        n1.addNode(n2);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
     {if (true) return new EqualityExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualitySymbols EqualitySymbols() throws ParseException {
   NodeChoice n0;
   EqualityExpression1 n1;
   EqualityExpression2 n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
      n1 = EqualityExpression1();
        n0 = new NodeChoice(n1, 0);
      break;
    case 70:
      n2 = EqualityExpression2();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new EqualitySymbols(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityExpression1 EqualityExpression1() throws ParseException {
   NodeToken n0;
   Token n1;
   EqualityExpression n2;
    n1 = jj_consume_token(69);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EqualityExpression();
     {if (true) return new EqualityExpression1(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityExpression2 EqualityExpression2() throws ParseException {
   NodeToken n0;
   Token n1;
   EqualityExpression n2;
    n1 = jj_consume_token(70);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = EqualityExpression();
     {if (true) return new EqualityExpression2(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression RelationalExpression() throws ParseException {
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   RelationalSymbols n2;
    n0 = ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
    case 72:
    case 73:
    case 74:
      n2 = RelationalSymbols();
        n1.addNode(n2);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
     {if (true) return new RelationalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalSymbols RelationalSymbols() throws ParseException {
   NodeChoice n0;
   RelationalExpression1 n1;
   RelationalExpression2 n2;
   RelationalExpression3 n3;
   RelationalExpression4 n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
      n1 = RelationalExpression1();
        n0 = new NodeChoice(n1, 0);
      break;
    case 72:
      n2 = RelationalExpression2();
        n0 = new NodeChoice(n2, 1);
      break;
    case 73:
      n3 = RelationalExpression3();
        n0 = new NodeChoice(n3, 2);
      break;
    case 74:
      n4 = RelationalExpression4();
        n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RelationalSymbols(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression1 RelationalExpression1() throws ParseException {
   NodeToken n0;
   Token n1;
   RelationalExpression n2;
    n1 = jj_consume_token(71);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelationalExpression();
     {if (true) return new RelationalExpression1(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression2 RelationalExpression2() throws ParseException {
   NodeToken n0;
   Token n1;
   RelationalExpression n2;
    n1 = jj_consume_token(72);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelationalExpression();
     {if (true) return new RelationalExpression2(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression3 RelationalExpression3() throws ParseException {
   NodeToken n0;
   Token n1;
   RelationalExpression n2;
    n1 = jj_consume_token(73);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelationalExpression();
     {if (true) return new RelationalExpression3(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression4 RelationalExpression4() throws ParseException {
   NodeToken n0;
   Token n1;
   RelationalExpression n2;
    n1 = jj_consume_token(74);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelationalExpression();
     {if (true) return new RelationalExpression4(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftExpression ShiftExpression() throws ParseException {
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   ShiftSymbols n2;
    n0 = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 75:
    case 76:
      n2 = ShiftSymbols();
        n1.addNode(n2);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
     {if (true) return new ShiftExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftSymbols ShiftSymbols() throws ParseException {
   NodeChoice n0;
   ShiftExpression1 n1;
   ShiftExpression2 n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 75:
      n1 = ShiftExpression1();
        n0 = new NodeChoice(n1, 0);
      break;
    case 76:
      n2 = ShiftExpression2();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ShiftSymbols(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftExpression1 ShiftExpression1() throws ParseException {
   NodeToken n0;
   Token n1;
   ShiftExpression n2;
    n1 = jj_consume_token(75);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ShiftExpression();
     {if (true) return new ShiftExpression1(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftExpression2 ShiftExpression2() throws ParseException {
   NodeToken n0;
   Token n1;
   ShiftExpression n2;
    n1 = jj_consume_token(76);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ShiftExpression();
     {if (true) return new ShiftExpression2(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpression AdditiveExpression() throws ParseException {
   MultiplicativeExpression n0;
   NodeOptional n1 = new NodeOptional();
   AddSymbols n2;
    n0 = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
    case 78:
      n2 = AddSymbols();
        n1.addNode(n2);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
     {if (true) return new AdditiveExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AddSymbols AddSymbols() throws ParseException {
   NodeChoice n0;
   AdditiveExpression1 n1;
   AdditiveExpression2 n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
      n1 = AdditiveExpression1();
        n0 = new NodeChoice(n1, 0);
      break;
    case 78:
      n2 = AdditiveExpression2();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AddSymbols(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpression1 AdditiveExpression1() throws ParseException {
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;
    n1 = jj_consume_token(77);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AdditiveExpression();
     {if (true) return new AdditiveExpression1(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpression2 AdditiveExpression2() throws ParseException {
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;
    n1 = jj_consume_token(78);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AdditiveExpression();
     {if (true) return new AdditiveExpression2(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
   CastExpression n0;
   NodeOptional n1 = new NodeOptional();
   MulSymbols n2;
    n0 = CastExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
    case 79:
    case 80:
      n2 = MulSymbols();
        n1.addNode(n2);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
     {if (true) return new MultiplicativeExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public MulSymbols MulSymbols() throws ParseException {
   NodeChoice n0;
   MultiplicativeExpression1 n1;
   MultiplicativeExpression2 n2;
   MultiplicativeExpression3 n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      n1 = MultiplicativeExpression1();
        n0 = new NodeChoice(n1, 0);
      break;
    case 79:
      n2 = MultiplicativeExpression2();
        n0 = new NodeChoice(n2, 1);
      break;
    case 80:
      n3 = MultiplicativeExpression3();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MulSymbols(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression1 MultiplicativeExpression1() throws ParseException {
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;
    n1 = jj_consume_token(48);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MultiplicativeExpression();
     {if (true) return new MultiplicativeExpression1(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression2 MultiplicativeExpression2() throws ParseException {
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;
    n1 = jj_consume_token(79);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MultiplicativeExpression();
     {if (true) return new MultiplicativeExpression2(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression3 MultiplicativeExpression3() throws ParseException {
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;
    n1 = jj_consume_token(80);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MultiplicativeExpression();
     {if (true) return new MultiplicativeExpression3(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CastExpression CastExpression() throws ParseException {
   NodeChoice n0;
   CastExpression1 n1;
   UnaryExpression n2;
    if (jj_2_17(2147483647)) {
      n1 = CastExpression1();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 44:
      case 48:
      case 68:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        n2 = UnaryExpression();
           n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new CastExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public CastExpression1 CastExpression1() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeName n2;
   NodeToken n3;
   Token n4;
   CastExpression n5;
    n1 = jj_consume_token(44);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeName();
    n4 = jj_consume_token(45);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = CastExpression();
     {if (true) return new CastExpression1(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression UnaryExpression() throws ParseException {
   NodeChoice n0;
   UnaryExpression1 n1;
   UnaryExpression2 n2;
   UnaryExpression3 n3;
   UnaryExpression4 n4;
    if (jj_2_18(3)) {
      n1 = UnaryExpression1();
           n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        n2 = UnaryExpression2();
           n0 = new NodeChoice(n2, 1);
        break;
      case 82:
        n3 = UnaryExpression3();
           n0 = new NodeChoice(n3, 2);
        break;
      case 48:
      case 68:
      case 77:
      case 78:
      case 83:
      case 84:
        n4 = UnaryExpression4();
           n0 = new NodeChoice(n4, 3);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression1 UnaryExpression1() throws ParseException {
   PostfixExpression n0;
    n0 = PostfixExpression();
     {if (true) return new UnaryExpression1(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression2 UnaryExpression2() throws ParseException {
   NodeToken n0;
   Token n1;
   UnaryExpression n2;
    n1 = jj_consume_token(81);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = UnaryExpression();
     {if (true) return new UnaryExpression2(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression3 UnaryExpression3() throws ParseException {
   NodeToken n0;
   Token n1;
   UnaryExpression n2;
    n1 = jj_consume_token(82);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = UnaryExpression();
     {if (true) return new UnaryExpression3(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression4 UnaryExpression4() throws ParseException {
   UnaryOperator n0;
   CastExpression n1;
    n0 = UnaryOperator();
    n1 = CastExpression();
     {if (true) return new UnaryExpression4(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryOperator UnaryOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      n2 = jj_consume_token(68);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case 48:
      n4 = jj_consume_token(48);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case 77:
      n6 = jj_consume_token(77);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case 78:
      n8 = jj_consume_token(78);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case 83:
      n10 = jj_consume_token(83);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case 84:
      n12 = jj_consume_token(84);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UnaryOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression PostfixExpression() throws ParseException {
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   PostfixExpression1 n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   ArgumentExpressionList n8;
   NodeToken n9;
   Token n10;
   PostfixExpression3 n11;
   PostfixExpression4 n12;
   PostfixExpression5 n13;
   PostfixExpression6 n14;
    n0 = PrimaryExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 46:
      case 81:
      case 82:
      case 85:
      case 86:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_12;
      }
        n7 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        n3 = PostfixExpression1();
           n2 = new NodeChoice(n3, 0);
        break;
      case 44:
           n4 = new NodeSequence(3);
        n6 = jj_consume_token(44);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        if (jj_2_19(2147483647)) {
          n8 = ArgumentExpressionList();
              n7.addNode(n8);
        } else {
          ;
        }
           n4.addNode(n7);
        n10 = jj_consume_token(45);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n4.addNode(n9);
           n2 = new NodeChoice(n4, 1);
        break;
      case 85:
        n11 = PostfixExpression3();
           n2 = new NodeChoice(n11, 2);
        break;
      case 86:
        n12 = PostfixExpression4();
           n2 = new NodeChoice(n12, 3);
        break;
      case 81:
        n13 = PostfixExpression5();
           n2 = new NodeChoice(n13, 4);
        break;
      case 82:
        n14 = PostfixExpression6();
           n2 = new NodeChoice(n14, 5);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new PostfixExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression1 PostfixExpression1() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(46);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(47);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new PostfixExpression1(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression3 PostfixExpression3() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(85);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new PostfixExpression3(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression4 PostfixExpression4() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(86);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new PostfixExpression4(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression5 PostfixExpression5() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(81);
             n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PostfixExpression5(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixExpression6 PostfixExpression6() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(82);
             n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PostfixExpression6(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Constant n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n3 = Constant();
           n0 = new NodeChoice(n3, 1);
      break;
    case 44:
           n4 = new NodeSequence(3);
      n6 = jj_consume_token(44);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
      n7 = Expression();
           n4.addNode(n7);
      n9 = jj_consume_token(45);
                  n8 = JTBToolkit.makeNodeToken(n9);
           n4.addNode(n8);
           n0 = new NodeChoice(n4, 2);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentExpressionList ArgumentExpressionList() throws ParseException {
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;
    n0 = AssignmentExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_13;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AssignmentExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgumentExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Constant Constant() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
                                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case CHARACTER_LITERAL:
      n6 = jj_consume_token(CHARACTER_LITERAL);
                               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case STRING_LITERAL:
      n8 = jj_consume_token(STRING_LITERAL);
                            n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Constant(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_3R_221() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_185()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(50)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_130()) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_220() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_219() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(81)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_212() {
    if (jj_3R_222()) return true;
    return false;
  }

  static private boolean jj_3R_211() {
    if (jj_3R_221()) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(42)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_210() {
    if (jj_3R_220()) return true;
    return false;
  }

  static private boolean jj_3R_209() {
    if (jj_3R_219()) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_3R_198()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_3R_187()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_214() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_93()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_213() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_3R_214()) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_3R_213()) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    if (jj_3R_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(42)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_3R_189()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_3R_182()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_235() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_206()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_205() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_204() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(48)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_234() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_206()) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_3R_180()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(44)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_scan_token(44)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_233() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_206()) return true;
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_3R_171()) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_3R_163()) return true;
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(44)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_230() {
    if (jj_3R_235()) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    return false;
  }

  static private boolean jj_3R_229() {
    if (jj_3R_234()) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_172()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_228() {
    if (jj_3R_233()) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(44)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  static private boolean jj_3R_215() {
    if (jj_3R_223()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_161()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_206() {
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_232() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_scan_token(86)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_131()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_231() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(85)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_225() {
    if (jj_3R_232()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_224() {
    if (jj_3R_231()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_207() {
    if (jj_3R_216()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_3R_206()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_3R_169()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_168()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_3R_167()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_166()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_227() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_scan_token(44)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_3R_164()) return true;
    return false;
  }

  static private boolean jj_3R_226() {
    if (jj_scan_token(75)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_218() {
    if (jj_3R_227()) return true;
    return false;
  }

  static private boolean jj_3R_217() {
    if (jj_3R_226()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_3R_208()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_187() {
    if (jj_3R_196()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    Token xsp;
    if (jj_3R_143()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3R_222() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_3R_195()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[70];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc8400000,0xc8400000,0xc8400000,0x0,0xc8400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd1000,0x0,0x0,0x0,0x0,0xd1000,0xc8400000,0x0,0x0,0xd1000,0xc8400000,0x0,0x79d1000,0x20200000,0xd1000,0x27bd1000,0x27bd1000,0x800000,0x2000000,0xd1000,0xd1000,0xd1000,0xd1000,0x5100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd1000,0x0,0x0,0x0,0x0,0xd1000,0x0,0xd1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x11049,0x9,0x9,0x11040,0x9,0x400,0x800,0x400,0x800,0x10000,0x1040,0x5000,0x11040,0x40,0x4000,0x1000,0x10000,0x400,0x15000,0x400,0x51040,0x400,0x15000,0x15000,0x10000,0x11040,0x9,0x5000,0x5000,0x11040,0x9,0x5000,0x51276,0x40,0x11040,0x51276,0x51276,0x10,0x24,0x11040,0x11040,0x11040,0x11040,0x2,0x400,0x7fe00800,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x11040,0x10000,0x10000,0x5000,0x5000,0x1040,0x400,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e6010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e6010,0x0,0x0,0x0,0x0,0x1e6010,0x0,0x0,0x0,0x1e6010,0x0,0x0,0x1e6010,0x0,0x1e6010,0x1e6010,0x1e6010,0x0,0x0,0x1e6010,0x1e6010,0x1e6010,0x1e6010,0x0,0x0,0x0,0x0,0x1,0x2,0x4,0x8,0x10,0x60,0x60,0x780,0x780,0x1800,0x1800,0x6000,0x6000,0x18000,0x18000,0x1e6010,0x1e6010,0x186010,0x660000,0x660000,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[19];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CParser(CParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 70; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
