//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ void visitors must implement this interface.
 */

public interface GJVoidVisitor<A> {

   //
   // GJ void Auto class visitors
   //

   public void visit(NodeList n, A argu);
   public void visit(NodeListOptional n, A argu);
   public void visit(NodeOptional n, A argu);
   public void visit(NodeSequence n, A argu);
   public void visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( ExternalDeclaration() )+
    */
   public void visit(TranslationUnit n, A argu);

   /**
    * f0 -> ( FunctionDefinition() | Declaration() )
    */
   public void visit(ExternalDeclaration n, A argu);

   /**
    * f0 -> [ DeclarationSpecifiers() ]
    * f1 -> Declarator()
    * f2 -> [ DeclarationList() ]
    * f3 -> CompoundStatement()
    */
   public void visit(FunctionDefinition n, A argu);

   /**
    * f0 -> DeclarationSpecifiers()
    * f1 -> [ InitDeclaratorList() ]
    * f2 -> ";"
    */
   public void visit(Declaration n, A argu);

   /**
    * f0 -> ( Declaration() )+
    */
   public void visit(DeclarationList n, A argu);

   /**
    * f0 -> TypeSpecifier()
    * f1 -> [ DeclarationSpecifiers() ]
    */
   public void visit(DeclarationSpecifiers n, A argu);

   /**
    * f0 -> ( <VOID> | <CHAR> | <INT> | <LONG> | <FLOAT> | <DOUBLE> )
    */
   public void visit(TypeSpecifier n, A argu);

   /**
    * f0 -> InitDeclarator()
    * f1 -> ( "," InitDeclarator() )*
    */
   public void visit(InitDeclaratorList n, A argu);

   /**
    * f0 -> Declarator()
    * f1 -> [ "=" Initializer() ]
    */
   public void visit(InitDeclarator n, A argu);

   /**
    * f0 -> TypeSpecifier()
    * f1 -> [ SpecifierQualifierList() ]
    */
   public void visit(SpecifierQualifierList n, A argu);

   /**
    * f0 -> Enumerator()
    * f1 -> ( "," Enumerator() )*
    */
   public void visit(EnumeratorList n, A argu);

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> [ "=" ConstantExpression() ]
    */
   public void visit(Enumerator n, A argu);

   /**
    * f0 -> [ Pointer() ]
    * f1 -> DirectDeclarator()
    */
   public void visit(Declarator n, A argu);

   /**
    * f0 -> ( t=<IDENTIFIER> | "(" Declarator() ")" )
    * f1 -> ( "[" [ ConstantExpression() ] "]" | "(" ParameterTypeList() ")" | "(" [ IdentifierList() ] ")" )*
    */
   public void visit(DirectDeclarator n, A argu);

   /**
    * f0 -> "*"
    * f1 -> [ Pointer() ]
    */
   public void visit(Pointer n, A argu);

   /**
    * f0 -> ParameterList()
    * f1 -> [ "," "..." ]
    */
   public void visit(ParameterTypeList n, A argu);

   /**
    * f0 -> ParameterDeclaration()
    * f1 -> ( "," ParameterDeclaration() )*
    */
   public void visit(ParameterList n, A argu);

   /**
    * f0 -> DeclarationSpecifiers()
    * f1 -> ( Declarator() | [ AbstractDeclarator() ] )
    */
   public void visit(ParameterDeclaration n, A argu);

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ( "," <IDENTIFIER> )*
    */
   public void visit(IdentifierList n, A argu);

   /**
    * f0 -> ( AssignmentExpression() | Initializer1() )
    */
   public void visit(Initializer n, A argu);

   /**
    * f0 -> "{"
    * f1 -> InitializerList()
    * f2 -> [ comma() ]
    * f3 -> "}"
    */
   public void visit(Initializer1 n, A argu);

   /**
    * f0 -> ","
    */
   public void visit(comma n, A argu);

   /**
    * f0 -> Initializer()
    * f1 -> ( "," Initializer() )*
    */
   public void visit(InitializerList n, A argu);

   /**
    * f0 -> SpecifierQualifierList()
    * f1 -> [ AbstractDeclarator() ]
    */
   public void visit(TypeName n, A argu);

   /**
    * f0 -> ( Pointer() | AbstractDeclarator1() )
    */
   public void visit(AbstractDeclarator n, A argu);

   /**
    * f0 -> [ Pointer() ]
    * f1 -> DirectAbstractDeclarator()
    */
   public void visit(AbstractDeclarator1 n, A argu);

   /**
    * f0 -> ( "(" AbstractDeclarator() ")" | "[" [ ConstantExpression() ] "]" | "(" [ ParameterTypeList() ] ")" )
    * f1 -> ( "[" [ ConstantExpression() ] "]" | "(" [ ParameterTypeList() ] ")" )*
    */
   public void visit(DirectAbstractDeclarator n, A argu);

   /**
    * f0 -> ( LabeledStatement() | ExpressionStatement() | CompoundStatement() | SelectionStatement() | IterationStatement() | JumpStatement() )
    */
   public void visit(Statement n, A argu);

   /**
    * f0 -> ( GotoLabel() | CaseLabel() | DefaultLabel() )
    */
   public void visit(LabeledStatement n, A argu);

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> ":"
    * f2 -> Statement()
    */
   public void visit(GotoLabel n, A argu);

   /**
    * f0 -> <CASE>
    * f1 -> ConstantExpression()
    * f2 -> ":"
    * f3 -> Statement()
    */
   public void visit(CaseLabel n, A argu);

   /**
    * f0 -> <DFLT>
    * f1 -> ":"
    * f2 -> Statement()
    */
   public void visit(DefaultLabel n, A argu);

   /**
    * f0 -> [ Expression() ]
    * f1 -> ";"
    */
   public void visit(ExpressionStatement n, A argu);

   /**
    * f0 -> "{"
    * f1 -> [ DeclarationList() ]
    * f2 -> [ StatementList() ]
    * f3 -> "}"
    */
   public void visit(CompoundStatement n, A argu);

   /**
    * f0 -> ( Statement() )+
    */
   public void visit(StatementList n, A argu);

   /**
    * f0 -> ( IfStatement() | SwitchStatement() )
    */
   public void visit(SelectionStatement n, A argu);

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> [ <ELSE> Statement() ]
    */
   public void visit(IfStatement n, A argu);

   /**
    * f0 -> <SWITCH>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(SwitchStatement n, A argu);

   /**
    * f0 -> ( WhileStatement() | DoWhileStatement() | ForStatement() )
    */
   public void visit(IterationStatement n, A argu);

   /**
    * f0 -> <WHILE>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(WhileStatement n, A argu);

   /**
    * f0 -> <DO>
    * f1 -> Statement()
    * f2 -> <WHILE>
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public void visit(DoWhileStatement n, A argu);

   /**
    * f0 -> <FOR>
    * f1 -> "("
    * f2 -> [ Expression() ]
    * f3 -> ";"
    * f4 -> [ Expression() ]
    * f5 -> ";"
    * f6 -> [ Expression() ]
    * f7 -> ")"
    * f8 -> Statement()
    */
   public void visit(ForStatement n, A argu);

   /**
    * f0 -> ( <GOTO> <IDENTIFIER> ";" | <CONTINUE> ";" | <BREAK> ";" | <RETURN> [ Expression() ] ";" )
    */
   public void visit(JumpStatement n, A argu);

   /**
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    */
   public void visit(Expression n, A argu);

   /**
    * f0 -> UnaryExpression() AssignmentOperator() AssignmentExpression()
    *       | ConditionalExpression()
    */
   public void visit(AssignmentExpression n, A argu);

   /**
    * f0 -> ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" )
    */
   public void visit(AssignmentOperator n, A argu);

   /**
    * f0 -> LogicalORExpression()
    * f1 -> [ ConditionalSubExpression() ]
    */
   public void visit(ConditionalExpression n, A argu);

   /**
    * f0 -> "?"
    * f1 -> Expression()
    * f2 -> ":"
    * f3 -> ConditionalExpression()
    */
   public void visit(ConditionalSubExpression n, A argu);

   /**
    * f0 -> ConditionalExpression()
    */
   public void visit(ConstantExpression n, A argu);

   /**
    * f0 -> LogicalANDExpression()
    * f1 -> [ "||" LogicalORExpression() ]
    */
   public void visit(LogicalORExpression n, A argu);

   /**
    * f0 -> InclusiveORExpression()
    * f1 -> [ "&&" LogicalANDExpression() ]
    */
   public void visit(LogicalANDExpression n, A argu);

   /**
    * f0 -> ExclusiveORExpression()
    * f1 -> [ "|" InclusiveORExpression() ]
    */
   public void visit(InclusiveORExpression n, A argu);

   /**
    * f0 -> ANDExpression()
    * f1 -> [ "^" ExclusiveORExpression() ]
    */
   public void visit(ExclusiveORExpression n, A argu);

   /**
    * f0 -> EqualityExpression()
    * f1 -> [ "&" ANDExpression() ]
    */
   public void visit(ANDExpression n, A argu);

   /**
    * f0 -> RelationalExpression()
    * f1 -> [ EqualitySymbols() ]
    */
   public void visit(EqualityExpression n, A argu);

   /**
    * f0 -> EqualityExpression1()
    *       | EqualityExpression2()
    */
   public void visit(EqualitySymbols n, A argu);

   /**
    * f0 -> "=="
    * f1 -> EqualityExpression()
    */
   public void visit(EqualityExpression1 n, A argu);

   /**
    * f0 -> "!="
    * f1 -> EqualityExpression()
    */
   public void visit(EqualityExpression2 n, A argu);

   /**
    * f0 -> ShiftExpression()
    * f1 -> [ RelationalSymbols() ]
    */
   public void visit(RelationalExpression n, A argu);

   /**
    * f0 -> RelationalExpression1()
    *       | RelationalExpression2()
    *       | RelationalExpression3()
    *       | RelationalExpression4()
    */
   public void visit(RelationalSymbols n, A argu);

   /**
    * f0 -> "<"
    * f1 -> RelationalExpression()
    */
   public void visit(RelationalExpression1 n, A argu);

   /**
    * f0 -> ">"
    * f1 -> RelationalExpression()
    */
   public void visit(RelationalExpression2 n, A argu);

   /**
    * f0 -> "<="
    * f1 -> RelationalExpression()
    */
   public void visit(RelationalExpression3 n, A argu);

   /**
    * f0 -> ">="
    * f1 -> RelationalExpression()
    */
   public void visit(RelationalExpression4 n, A argu);

   /**
    * f0 -> AdditiveExpression()
    * f1 -> [ ShiftSymbols() ]
    */
   public void visit(ShiftExpression n, A argu);

   /**
    * f0 -> ShiftExpression1()
    *       | ShiftExpression2()
    */
   public void visit(ShiftSymbols n, A argu);

   /**
    * f0 -> "<<"
    * f1 -> ShiftExpression()
    */
   public void visit(ShiftExpression1 n, A argu);

   /**
    * f0 -> ">>"
    * f1 -> ShiftExpression()
    */
   public void visit(ShiftExpression2 n, A argu);

   /**
    * f0 -> MultiplicativeExpression()
    * f1 -> [ AddSymbols() ]
    */
   public void visit(AdditiveExpression n, A argu);

   /**
    * f0 -> AdditiveExpression1()
    *       | AdditiveExpression2()
    */
   public void visit(AddSymbols n, A argu);

   /**
    * f0 -> "+"
    * f1 -> AdditiveExpression()
    */
   public void visit(AdditiveExpression1 n, A argu);

   /**
    * f0 -> "-"
    * f1 -> AdditiveExpression()
    */
   public void visit(AdditiveExpression2 n, A argu);

   /**
    * f0 -> CastExpression()
    * f1 -> [ MulSymbols() ]
    */
   public void visit(MultiplicativeExpression n, A argu);

   /**
    * f0 -> MultiplicativeExpression1()
    *       | MultiplicativeExpression2()
    *       | MultiplicativeExpression3()
    */
   public void visit(MulSymbols n, A argu);

   /**
    * f0 -> "*"
    * f1 -> MultiplicativeExpression()
    */
   public void visit(MultiplicativeExpression1 n, A argu);

   /**
    * f0 -> "/"
    * f1 -> MultiplicativeExpression()
    */
   public void visit(MultiplicativeExpression2 n, A argu);

   /**
    * f0 -> "%"
    * f1 -> MultiplicativeExpression()
    */
   public void visit(MultiplicativeExpression3 n, A argu);

   /**
    * f0 -> ( CastExpression1() | UnaryExpression() )
    */
   public void visit(CastExpression n, A argu);

   /**
    * f0 -> "("
    * f1 -> TypeName()
    * f2 -> ")"
    * f3 -> CastExpression()
    */
   public void visit(CastExpression1 n, A argu);

   /**
    * f0 -> ( UnaryExpression1() | UnaryExpression2() | UnaryExpression3() | UnaryExpression4() )
    */
   public void visit(UnaryExpression n, A argu);

   /**
    * f0 -> PostfixExpression()
    */
   public void visit(UnaryExpression1 n, A argu);

   /**
    * f0 -> "++"
    * f1 -> UnaryExpression()
    */
   public void visit(UnaryExpression2 n, A argu);

   /**
    * f0 -> "--"
    * f1 -> UnaryExpression()
    */
   public void visit(UnaryExpression3 n, A argu);

   /**
    * f0 -> UnaryOperator()
    * f1 -> CastExpression()
    */
   public void visit(UnaryExpression4 n, A argu);

   /**
    * f0 -> ( "&" | "*" | "+" | "-" | "~" | "!" )
    */
   public void visit(UnaryOperator n, A argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> ( PostfixExpression1() | "(" [ ArgumentExpressionList() ] ")" | PostfixExpression3() | PostfixExpression4() | PostfixExpression5() | PostfixExpression6() )*
    */
   public void visit(PostfixExpression n, A argu);

   /**
    * f0 -> "["
    * f1 -> Expression()
    * f2 -> "]"
    */
   public void visit(PostfixExpression1 n, A argu);

   /**
    * f0 -> "."
    * f1 -> <IDENTIFIER>
    */
   public void visit(PostfixExpression3 n, A argu);

   /**
    * f0 -> "->"
    * f1 -> <IDENTIFIER>
    */
   public void visit(PostfixExpression4 n, A argu);

   /**
    * f0 -> "++"
    */
   public void visit(PostfixExpression5 n, A argu);

   /**
    * f0 -> "--"
    */
   public void visit(PostfixExpression6 n, A argu);

   /**
    * f0 -> ( <IDENTIFIER> | Constant() | "(" Expression() ")" )
    */
   public void visit(PrimaryExpression n, A argu);

   /**
    * f0 -> AssignmentExpression()
    * f1 -> ( "," AssignmentExpression() )*
    */
   public void visit(ArgumentExpressionList n, A argu);

   /**
    * f0 -> <INTEGER_LITERAL>
    *       | <FLOATING_POINT_LITERAL>
    *       | <CHARACTER_LITERAL>
    *       | <STRING_LITERAL>
    */
   public void visit(Constant n, A argu);

}

