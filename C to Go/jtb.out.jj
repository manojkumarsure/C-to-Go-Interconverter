//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(CParser)
import java.util.*;
import syntaxtree.*;
import java.util.Vector;


public class CParser 
{
   private static Set types = new HashSet();
   private static Stack typedefParsingStack = new Stack();
   private static boolean isType(String type)
   {
      return types.contains(type);
   }
   private static void addType(String type)
   {
      types.add(type);
   }
   private static void printTypes()
   {
      for ( Iterator i = types.iterator(); i.hasNext();  )
      {
         System.out.println(i.next());
      }
   }
   public static void main(String args[])
   {
      CParser parser;
      types.add("__signed__");
      types.add("__const");
      types.add("__inline__");
      types.add("__signed");
      if ( args.length == 0 )
      {
         System.out.println("C Parser Version 0.1Alpha:  Reading from standard input . . .");
         parser = new CParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("C Parser Version 0.1Alpha:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new CParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("C Parser Version 0.1:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("C Parser Version 0.1Alpha:  Usage is one of:");
            System.out.println("         java CParser < inputfile");
            System.out.println("OR");
            System.out.println("         java CParser inputfile");
            return;
         }
      try
      {
         parser.TranslationUnit();
         System.out.println("C Parser Version 0.1Alpha:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println("C Parser Version 0.1Alpha:  Encountered errors during parse.");
         e.printStackTrace();
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
   | "#" : PREPROCESSOR_OUTPUT
}

<PREPROCESSOR_OUTPUT> SKIP :
{
   "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE :
{
   "\\\n"
   | "\\\r\n"
   | <~[]>
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "\'" (~["\'", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
   | <STRING_LITERAL: "\"" (~["\"", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"] | (["\n", "\r"] | "\r\n")))* "\"">
}

TOKEN :
{
   <CONTINUE: "continue">
   | <DFLT: "default">
   | <DOUBLE: "double">
   | <SWITCH: "switch">
   | <RETURN: "return">
   | <WHILE: "while">
   | <BREAK: "break">
   | <FLOAT: "float">
   | <ELSE: "else">
   | <CASE: "case">
   | <LONG: "long">
   | <VOID: "void">
   | <CHAR: "char">
   | <GOTO: "goto">
   | <FOR: "for">
   | <INT: "int">
   | <IF: "if">
   | <DO: "do">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z"]>
   | <#DIGIT: ["0"-"9"]>
}

TranslationUnit TranslationUnit() :
{
   NodeList n0 = new NodeList();
   ExternalDeclaration n1;

   
}
{
   (
      n1=ExternalDeclaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   {
      printTypes();
   }
   
   
   { return new TranslationUnit(n0); }
}

ExternalDeclaration ExternalDeclaration() :
{
   NodeChoice n0;
   FunctionDefinition n1;
   Declaration n2;

   
}
{
   (
      (
         LOOKAHEAD(FunctionDefinition())
         n1=FunctionDefinition()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Declaration()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new ExternalDeclaration(n0); }
}

FunctionDefinition FunctionDefinition() :
{
   NodeOptional n0 = new NodeOptional();
   DeclarationSpecifiers n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   DeclarationList n4;
   CompoundStatement n5;

   
}
{
   (
      LOOKAHEAD(DeclarationSpecifiers())
      n1=DeclarationSpecifiers()
      { n0.addNode(n1); }
   )?
   n2=Declarator()
   (
      n4=DeclarationList()
      { n3.addNode(n4); }
   )?
   n5=CompoundStatement()
   
   { return new FunctionDefinition(n0,n2,n3,n5); }
}

Declaration Declaration() :
{
   DeclarationSpecifiers n0;
   NodeOptional n1 = new NodeOptional();
   InitDeclaratorList n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=DeclarationSpecifiers()
   (
      n2=InitDeclaratorList()
      { n1.addNode(n2); }
   )?
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Declaration(n0,n1,n3); }
}

DeclarationList DeclarationList() :
{
   NodeList n0 = new NodeList();
   Declaration n1;

   
}
{
   (
      LOOKAHEAD(Declaration())
      n1=Declaration()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new DeclarationList(n0); }
}

DeclarationSpecifiers DeclarationSpecifiers() :
{
   TypeSpecifier n0;
   NodeOptional n1 = new NodeOptional();
   DeclarationSpecifiers n2;

   
}
{
   n0=TypeSpecifier()
   (
      LOOKAHEAD(DeclarationSpecifiers())
      n2=DeclarationSpecifiers()
      { n1.addNode(n2); }
   )?
   
   { return new DeclarationSpecifiers(n0,n1); }
}

TypeSpecifier TypeSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      (
         n2=<VOID> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<INT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<LONG> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<FLOAT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<DOUBLE> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      )
      
   )
   
   { return new TypeSpecifier(n0); }
}

InitDeclaratorList InitDeclaratorList() :
{
   InitDeclarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InitDeclarator n5;

   
}
{
   n0=InitDeclarator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InitDeclarator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   {
      if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
      {
         typedefParsingStack.pop();
      }
   }
   
   
   { return new InitDeclaratorList(n0,n1); }
}

InitDeclarator InitDeclarator() :
{
   Declarator n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Declarator()
   (
      { n2 = new NodeSequence(2); }
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InitDeclarator(n0,n1); }
}

SpecifierQualifierList SpecifierQualifierList() :
{
   TypeSpecifier n0;
   NodeOptional n1 = new NodeOptional();
   SpecifierQualifierList n2;

   
}
{
   n0=TypeSpecifier()
   (
      LOOKAHEAD(SpecifierQualifierList())
      n2=SpecifierQualifierList()
      { n1.addNode(n2); }
   )?
   
   { return new SpecifierQualifierList(n0,n1); }
}

EnumeratorList EnumeratorList() :
{
   Enumerator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Enumerator n5;

   
}
{
   n0=Enumerator()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Enumerator()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new EnumeratorList(n0,n1); }
}

Enumerator Enumerator() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=ConstantExpression()
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Enumerator(n0,n2); }
}

Declarator Declarator() :
{
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectDeclarator n2;

   
}
{
   (
      n1=Pointer()
      { n0.addNode(n1); }
   )?
   n2=DirectDeclarator()
   
   { return new Declarator(n0,n2); }
}

DirectDeclarator DirectDeclarator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Declarator n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   ConstantExpression n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   ParameterTypeList n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   IdentifierList n28;
   NodeToken n29;
   Token n30;

   Token t;
}
{
   (
      (
         n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2);t=n2; }
         
         {
            if ( !(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue() )
            {
               addType(t.image);
            }
         }
         
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(3); }
         n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Declarator()
         { n3.addNode(n6); }
         n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
   {
      typedefParsingStack.push(Boolean.FALSE);
   }
   
   (
      { n14 = new NodeOptional(); }
      { n27 = new NodeOptional(); }
      (
         { n11 = new NodeSequence(3); }
         n13="[" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         (
            n15=ConstantExpression()
            { n14.addNode(n15); }
         )?
         { n11.addNode(n14); }
         n17="]" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n11.addNode(n16); }
         { n10 = new NodeChoice(n11, 0); }
      |
         LOOKAHEAD(3)
         { n18 = new NodeSequence(4); }
         n20="(" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         n21=ParameterTypeList()
         { n18.addNode(n21); }
         n23=")" { n22 = JTBToolkit.makeNodeToken(n23); }
         { n18.addNode(n22); }
         { n10 = new NodeChoice(n18, 1); }
      |
         { n24 = new NodeSequence(3); }
         n26="(" { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         (
            n28=IdentifierList()
            { n27.addNode(n28); }
         )?
         { n24.addNode(n27); }
         n30=")" { n29 = JTBToolkit.makeNodeToken(n30); }
         { n24.addNode(n29); }
         { n10 = new NodeChoice(n24, 2); }
      )
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   
   {
      typedefParsingStack.pop();
   }
   
   
   { return new DirectDeclarator(n0,n9); }
}

Pointer Pointer() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Pointer n3;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Pointer()
      { n2.addNode(n3); }
   )?
   
   { return new Pointer(n0,n2); }
}

ParameterTypeList ParameterTypeList() :
{
   ParameterList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=ParameterList()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6="..." { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ParameterTypeList(n0,n1); }
}

ParameterList ParameterList() :
{
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;

   
}
{
   n0=ParameterDeclaration()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ParameterDeclaration()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ParameterList(n0,n1); }
}

ParameterDeclaration ParameterDeclaration() :
{
   DeclarationSpecifiers n0;
   NodeChoice n1;
   Declarator n2;
   NodeOptional n3 = new NodeOptional();
   AbstractDeclarator n4;

   
}
{
   n0=DeclarationSpecifiers()
   (
      (
         LOOKAHEAD(Declarator())
         n2=Declarator()
         { n1 = new NodeChoice(n2, 0); }
      |
         (
            n4=AbstractDeclarator()
            { n3.addNode(n4); }
         )?
         { n1 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new ParameterDeclaration(n0,n1); }
}

IdentifierList IdentifierList() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new IdentifierList(n0,n2); }
}

Initializer Initializer() :
{
   NodeChoice n0;
   AssignmentExpression n1;
   Initializer1 n2;

   
}
{
   (
      (
         n1=AssignmentExpression()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Initializer1()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new Initializer(n0); }
}

Initializer1 Initializer1() :
{
   NodeToken n0;
   Token n1;
   InitializerList n2;
   NodeOptional n3 = new NodeOptional();
   comma n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=InitializerList()
   (
      n4=comma()
      { n3.addNode(n4); }
   )?
   n6="}" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Initializer1(n0,n2,n3,n5); }
}

comma comma() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new comma(n0); }
}

InitializerList InitializerList() :
{
   Initializer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Initializer n5;

   
}
{
   n0=Initializer()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Initializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new InitializerList(n0,n1); }
}

TypeName TypeName() :
{
   SpecifierQualifierList n0;
   NodeOptional n1 = new NodeOptional();
   AbstractDeclarator n2;

   
}
{
   n0=SpecifierQualifierList()
   (
      n2=AbstractDeclarator()
      { n1.addNode(n2); }
   )?
   
   { return new TypeName(n0,n1); }
}

AbstractDeclarator AbstractDeclarator() :
{
   NodeChoice n0;
   Pointer n1;
   AbstractDeclarator1 n2;

   
}
{
   (
      (
         LOOKAHEAD(3)
         n1=Pointer()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=AbstractDeclarator1()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new AbstractDeclarator(n0); }
}

AbstractDeclarator1 AbstractDeclarator1() :
{
   NodeOptional n0 = new NodeOptional();
   Pointer n1;
   DirectAbstractDeclarator n2;

   
}
{
   (
      n1=Pointer()
      { n0.addNode(n1); }
   )?
   n2=DirectAbstractDeclarator()
   
   { return new AbstractDeclarator1(n0,n2); }
}

DirectAbstractDeclarator DirectAbstractDeclarator() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   AbstractDeclarator n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ConstantExpression n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   ParameterTypeList n18;
   NodeToken n19;
   Token n20;
   NodeListOptional n21 = new NodeListOptional();
   NodeChoice n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   ConstantExpression n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33;
   ParameterTypeList n34;
   NodeToken n35;
   Token n36;

   
}
{
   (
      (
         LOOKAHEAD(2)
         { n1 = new NodeSequence(4); }
         n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=AbstractDeclarator()
         { n1.addNode(n4); }
         n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(3); }
         n9="[" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n11=ConstantExpression()
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         n13="]" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7.addNode(n12); }
         { n0 = new NodeChoice(n7, 1); }
      |
         { n14 = new NodeSequence(3); }
         n16="(" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         (
            n18=ParameterTypeList()
            { n17.addNode(n18); }
         )?
         { n14.addNode(n17); }
         n20=")" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n14.addNode(n19); }
         { n0 = new NodeChoice(n14, 2); }
      )
      
   )
   (
      { n26 = new NodeOptional(); }
      { n33 = new NodeOptional(); }
      (
         { n23 = new NodeSequence(3); }
         n25="[" { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         (
            n27=ConstantExpression()
            { n26.addNode(n27); }
         )?
         { n23.addNode(n26); }
         n29="]" { n28 = JTBToolkit.makeNodeToken(n29); }
         { n23.addNode(n28); }
         { n22 = new NodeChoice(n23, 0); }
      |
         { n30 = new NodeSequence(3); }
         n32="(" { n31 = JTBToolkit.makeNodeToken(n32); }
         { n30.addNode(n31); }
         (
            n34=ParameterTypeList()
            { n33.addNode(n34); }
         )?
         { n30.addNode(n33); }
         n36=")" { n35 = JTBToolkit.makeNodeToken(n36); }
         { n30.addNode(n35); }
         { n22 = new NodeChoice(n30, 1); }
      )
      { n21.addNode(n22); }
   )*
   { n21.nodes.trimToSize(); }
   
   { return new DirectAbstractDeclarator(n0,n21); }
}

Statement Statement() :
{
   NodeChoice n0;
   LabeledStatement n1;
   ExpressionStatement n2;
   CompoundStatement n3;
   SelectionStatement n4;
   IterationStatement n5;
   JumpStatement n6;

   
}
{
   (
      (
         LOOKAHEAD(2)
         n1=LabeledStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=ExpressionStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=CompoundStatement()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=SelectionStatement()
         { n0 = new NodeChoice(n4, 3); }
      |
         n5=IterationStatement()
         { n0 = new NodeChoice(n5, 4); }
      |
         n6=JumpStatement()
         { n0 = new NodeChoice(n6, 5); }
      )
      
   )
   
   { return new Statement(n0); }
}

LabeledStatement LabeledStatement() :
{
   NodeChoice n0;
   GotoLabel n1;
   CaseLabel n2;
   DefaultLabel n3;

   
}
{
   (
      (
         n1=GotoLabel()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=CaseLabel()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=DefaultLabel()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
   { return new LabeledStatement(n0); }
}

GotoLabel GotoLabel() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=":" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Statement()
   
   { return new GotoLabel(n0,n2,n4); }
}

CaseLabel CaseLabel() :
{
   NodeToken n0;
   Token n1;
   ConstantExpression n2;
   NodeToken n3;
   Token n4;
   Statement n5;

   
}
{
   n1=<CASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ConstantExpression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Statement()
   
   { return new CaseLabel(n0,n2,n3,n5); }
}

DefaultLabel DefaultLabel() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;

   
}
{
   n1=<DFLT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=":" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Statement()
   
   { return new DefaultLabel(n0,n2,n4); }
}

ExpressionStatement ExpressionStatement() :
{
   NodeOptional n0 = new NodeOptional();
   Expression n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=Expression()
      { n0.addNode(n1); }
   )?
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ExpressionStatement(n0,n2); }
}

CompoundStatement CompoundStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   DeclarationList n3;
   NodeOptional n4 = new NodeOptional();
   StatementList n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(DeclarationList())
      n3=DeclarationList()
      { n2.addNode(n3); }
   )?
   (
      n5=StatementList()
      { n4.addNode(n5); }
   )?
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new CompoundStatement(n0,n2,n4,n6); }
}

StatementList StatementList() :
{
   NodeList n0 = new NodeList();
   Statement n1;

   
}
{
   (
      n1=Statement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new StatementList(n0); }
}

SelectionStatement SelectionStatement() :
{
   NodeChoice n0;
   IfStatement n1;
   SwitchStatement n2;

   
}
{
   (
      (
         n1=IfStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=SwitchStatement()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new SelectionStatement(n0); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Statement n12;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   (
      LOOKAHEAD(2)
      { n9 = new NodeSequence(2); }
      n11=<ELSE> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=Statement()
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8); }
}

SwitchStatement SwitchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<SWITCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new SwitchStatement(n0,n2,n4,n5,n7); }
}

IterationStatement IterationStatement() :
{
   NodeChoice n0;
   WhileStatement n1;
   DoWhileStatement n2;
   ForStatement n3;

   
}
{
   (
      (
         n1=WhileStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=DoWhileStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=ForStatement()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
   { return new IterationStatement(n0); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<WHILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

DoWhileStatement DoWhileStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<DO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   n4=<WHILE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new DoWhileStatement(n0,n2,n3,n5,n7,n8,n10); }
}

ForStatement ForStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Expression n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   Expression n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   Expression n13;
   NodeToken n14;
   Token n15;
   Statement n16;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=Expression()
      { n4.addNode(n5); }
   )?
   n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=Expression()
      { n8.addNode(n9); }
   )?
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      n13=Expression()
      { n12.addNode(n13); }
   )?
   n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Statement()
   
   { return new ForStatement(n0,n2,n4,n6,n8,n10,n12,n14,n16); }
}

JumpStatement JumpStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   Expression n22;
   NodeToken n23;
   Token n24;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<GOTO> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n8 = new NodeSequence(2); }
         n10=<CONTINUE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=";" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         { n0 = new NodeChoice(n8, 1); }
      |
         { n13 = new NodeSequence(2); }
         n15=<BREAK> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         n17=";" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13.addNode(n16); }
         { n0 = new NodeChoice(n13, 2); }
      |
         { n18 = new NodeSequence(3); }
         n20=<RETURN> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         (
            n22=Expression()
            { n21.addNode(n22); }
         )?
         { n18.addNode(n21); }
         n24=";" { n23 = JTBToolkit.makeNodeToken(n24); }
         { n18.addNode(n23); }
         { n0 = new NodeChoice(n18, 3); }
      )
      
   )
   
   { return new JumpStatement(n0); }
}

Expression Expression() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Expression(n0,n1); }
}

AssignmentExpression AssignmentExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   UnaryExpression n2;
   AssignmentOperator n3;
   AssignmentExpression n4;
   ConditionalExpression n5;

   
}
{
   (
      LOOKAHEAD(UnaryExpression() AssignmentOperator())
      { n1 = new NodeSequence(4); }
      n2=UnaryExpression()
      { n1.addNode(n2); }
      n3=AssignmentOperator()
      { n1.addNode(n3); }
      n4=AssignmentExpression()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n5=ConditionalExpression()
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new AssignmentExpression(n0); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      (
         n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="*=" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="/=" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8="%=" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10="+=" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12="-=" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14="<<=" { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=">>=" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18="&=" { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20="^=" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      |
         n22="|=" { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 10); }
      )
      
   )
   
   { return new AssignmentOperator(n0); }
}

ConditionalExpression ConditionalExpression() :
{
   LogicalORExpression n0;
   NodeOptional n1 = new NodeOptional();
   ConditionalSubExpression n2;

   
}
{
   n0=LogicalORExpression()
   (
      n2=ConditionalSubExpression()
      { n1.addNode(n2); }
   )?
   
   { return new ConditionalExpression(n0,n1); }
}

ConditionalSubExpression ConditionalSubExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   ConditionalExpression n5;

   
}
{
   n1="?" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=ConditionalExpression()
   
   { return new ConditionalSubExpression(n0,n2,n3,n5); }
}

ConstantExpression ConstantExpression() :
{
   ConditionalExpression n0;

   
}
{
   n0=ConditionalExpression()
   
   { return new ConstantExpression(n0); }
}

LogicalORExpression LogicalORExpression() :
{
   LogicalANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalORExpression n5;

   
}
{
   n0=LogicalANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="||" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalORExpression(n0,n1); }
}

LogicalANDExpression LogicalANDExpression() :
{
   InclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   LogicalANDExpression n5;

   
}
{
   n0=InclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=LogicalANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new LogicalANDExpression(n0,n1); }
}

InclusiveORExpression InclusiveORExpression() :
{
   ExclusiveORExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveORExpression n5;

   
}
{
   n0=ExclusiveORExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="|" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InclusiveORExpression(n0,n1); }
}

ExclusiveORExpression ExclusiveORExpression() :
{
   ANDExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveORExpression n5;

   
}
{
   n0=ANDExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="^" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ExclusiveORExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ExclusiveORExpression(n0,n1); }
}

ANDExpression ANDExpression() :
{
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ANDExpression n5;

   
}
{
   n0=EqualityExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ANDExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ANDExpression(n0,n1); }
}

EqualityExpression EqualityExpression() :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   EqualitySymbols n2;

   
}
{
   n0=RelationalExpression()
   (
      n2=EqualitySymbols()
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

EqualitySymbols EqualitySymbols() :
{
   NodeChoice n0;
   EqualityExpression1 n1;
   EqualityExpression2 n2;

   
}
{
   (
      n1=EqualityExpression1()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=EqualityExpression2()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new EqualitySymbols(n0); }
}

EqualityExpression1 EqualityExpression1() :
{
   NodeToken n0;
   Token n1;
   EqualityExpression n2;

   
}
{
   n1="==" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EqualityExpression()
   
   { return new EqualityExpression1(n0,n2); }
}

EqualityExpression2 EqualityExpression2() :
{
   NodeToken n0;
   Token n1;
   EqualityExpression n2;

   
}
{
   n1="!=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EqualityExpression()
   
   { return new EqualityExpression2(n0,n2); }
}

RelationalExpression RelationalExpression() :
{
   ShiftExpression n0;
   NodeOptional n1 = new NodeOptional();
   RelationalSymbols n2;

   
}
{
   n0=ShiftExpression()
   (
      n2=RelationalSymbols()
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExpression(n0,n1); }
}

RelationalSymbols RelationalSymbols() :
{
   NodeChoice n0;
   RelationalExpression1 n1;
   RelationalExpression2 n2;
   RelationalExpression3 n3;
   RelationalExpression4 n4;

   
}
{
   (
      n1=RelationalExpression1()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=RelationalExpression2()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=RelationalExpression3()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RelationalExpression4()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new RelationalSymbols(n0); }
}

RelationalExpression1 RelationalExpression1() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1="<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalExpression1(n0,n2); }
}

RelationalExpression2 RelationalExpression2() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1=">" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalExpression2(n0,n2); }
}

RelationalExpression3 RelationalExpression3() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1="<=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalExpression3(n0,n2); }
}

RelationalExpression4 RelationalExpression4() :
{
   NodeToken n0;
   Token n1;
   RelationalExpression n2;

   
}
{
   n1=">=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExpression()
   
   { return new RelationalExpression4(n0,n2); }
}

ShiftExpression ShiftExpression() :
{
   AdditiveExpression n0;
   NodeOptional n1 = new NodeOptional();
   ShiftSymbols n2;

   
}
{
   n0=AdditiveExpression()
   (
      n2=ShiftSymbols()
      { n1.addNode(n2); }
   )?
   
   { return new ShiftExpression(n0,n1); }
}

ShiftSymbols ShiftSymbols() :
{
   NodeChoice n0;
   ShiftExpression1 n1;
   ShiftExpression2 n2;

   
}
{
   (
      n1=ShiftExpression1()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ShiftExpression2()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ShiftSymbols(n0); }
}

ShiftExpression1 ShiftExpression1() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1="<<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new ShiftExpression1(n0,n2); }
}

ShiftExpression2 ShiftExpression2() :
{
   NodeToken n0;
   Token n1;
   ShiftExpression n2;

   
}
{
   n1=">>" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ShiftExpression()
   
   { return new ShiftExpression2(n0,n2); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeOptional n1 = new NodeOptional();
   AddSymbols n2;

   
}
{
   n0=MultiplicativeExpression()
   (
      n2=AddSymbols()
      { n1.addNode(n2); }
   )?
   
   { return new AdditiveExpression(n0,n1); }
}

AddSymbols AddSymbols() :
{
   NodeChoice n0;
   AdditiveExpression1 n1;
   AdditiveExpression2 n2;

   
}
{
   (
      n1=AdditiveExpression1()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AdditiveExpression2()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new AddSymbols(n0); }
}

AdditiveExpression1 AdditiveExpression1() :
{
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;

   
}
{
   n1="+" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AdditiveExpression()
   
   { return new AdditiveExpression1(n0,n2); }
}

AdditiveExpression2 AdditiveExpression2() :
{
   NodeToken n0;
   Token n1;
   AdditiveExpression n2;

   
}
{
   n1="-" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AdditiveExpression()
   
   { return new AdditiveExpression2(n0,n2); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   CastExpression n0;
   NodeOptional n1 = new NodeOptional();
   MulSymbols n2;

   
}
{
   n0=CastExpression()
   (
      n2=MulSymbols()
      { n1.addNode(n2); }
   )?
   
   { return new MultiplicativeExpression(n0,n1); }
}

MulSymbols MulSymbols() :
{
   NodeChoice n0;
   MultiplicativeExpression1 n1;
   MultiplicativeExpression2 n2;
   MultiplicativeExpression3 n3;

   
}
{
   (
      n1=MultiplicativeExpression1()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=MultiplicativeExpression2()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=MultiplicativeExpression3()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new MulSymbols(n0); }
}

MultiplicativeExpression1 MultiplicativeExpression1() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new MultiplicativeExpression1(n0,n2); }
}

MultiplicativeExpression2 MultiplicativeExpression2() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="/" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new MultiplicativeExpression2(n0,n2); }
}

MultiplicativeExpression3 MultiplicativeExpression3() :
{
   NodeToken n0;
   Token n1;
   MultiplicativeExpression n2;

   
}
{
   n1="%" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplicativeExpression()
   
   { return new MultiplicativeExpression3(n0,n2); }
}

CastExpression CastExpression() :
{
   NodeChoice n0;
   CastExpression1 n1;
   UnaryExpression n2;

   
}
{
   (
      (
         LOOKAHEAD(CastExpression1())
         n1=CastExpression1()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=UnaryExpression()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new CastExpression(n0); }
}

CastExpression1 CastExpression1() :
{
   NodeToken n0;
   Token n1;
   TypeName n2;
   NodeToken n3;
   Token n4;
   CastExpression n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeName()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=CastExpression()
   
   { return new CastExpression1(n0,n2,n3,n5); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   UnaryExpression1 n1;
   UnaryExpression2 n2;
   UnaryExpression3 n3;
   UnaryExpression4 n4;

   
}
{
   (
      (
         LOOKAHEAD(3)
         n1=UnaryExpression1()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=UnaryExpression2()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=UnaryExpression3()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=UnaryExpression4()
         { n0 = new NodeChoice(n4, 3); }
      )
      
   )
   
   { return new UnaryExpression(n0); }
}

UnaryExpression1 UnaryExpression1() :
{
   PostfixExpression n0;

   
}
{
   n0=PostfixExpression()
   
   { return new UnaryExpression1(n0); }
}

UnaryExpression2 UnaryExpression2() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new UnaryExpression2(n0,n2); }
}

UnaryExpression3 UnaryExpression3() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new UnaryExpression3(n0,n2); }
}

UnaryExpression4 UnaryExpression4() :
{
   UnaryOperator n0;
   CastExpression n1;

   
}
{
   n0=UnaryOperator()
   n1=CastExpression()
   
   { return new UnaryExpression4(n0,n1); }
}

UnaryOperator UnaryOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      (
         n2="&" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="*" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="+" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8="-" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10="~" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12="!" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      )
      
   )
   
   { return new UnaryOperator(n0); }
}

PostfixExpression PostfixExpression() :
{
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   PostfixExpression1 n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   ArgumentExpressionList n8;
   NodeToken n9;
   Token n10;
   PostfixExpression3 n11;
   PostfixExpression4 n12;
   PostfixExpression5 n13;
   PostfixExpression6 n14;

   
}
{
   n0=PrimaryExpression()
   (
      { n7 = new NodeOptional(); }
      (
         n3=PostfixExpression1()
         { n2 = new NodeChoice(n3, 0); }
      |
         { n4 = new NodeSequence(3); }
         n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         (
            LOOKAHEAD(ArgumentExpressionList())
            n8=ArgumentExpressionList()
            { n7.addNode(n8); }
         )?
         { n4.addNode(n7); }
         n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n4.addNode(n9); }
         { n2 = new NodeChoice(n4, 1); }
      |
         n11=PostfixExpression3()
         { n2 = new NodeChoice(n11, 2); }
      |
         n12=PostfixExpression4()
         { n2 = new NodeChoice(n12, 3); }
      |
         n13=PostfixExpression5()
         { n2 = new NodeChoice(n13, 4); }
      |
         n14=PostfixExpression6()
         { n2 = new NodeChoice(n14, 5); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PostfixExpression(n0,n1); }
}

PostfixExpression1 PostfixExpression1() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new PostfixExpression1(n0,n2,n3); }
}

PostfixExpression3 PostfixExpression3() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PostfixExpression3(n0,n2); }
}

PostfixExpression4 PostfixExpression4() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="->" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new PostfixExpression4(n0,n2); }
}

PostfixExpression5 PostfixExpression5() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PostfixExpression5(n0); }
}

PostfixExpression6 PostfixExpression6() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PostfixExpression6(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Constant n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      (
         n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n3=Constant()
         { n0 = new NodeChoice(n3, 1); }
      |
         { n4 = new NodeSequence(3); }
         n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=Expression()
         { n4.addNode(n7); }
         n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n4.addNode(n8); }
         { n0 = new NodeChoice(n4, 2); }
      )
      
   )
   
   { return new PrimaryExpression(n0); }
}

ArgumentExpressionList ArgumentExpressionList() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignmentExpression n5;

   
}
{
   n0=AssignmentExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignmentExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgumentExpressionList(n0,n1); }
}

Constant Constant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHARACTER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<STRING_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new Constant(n0); }
}
